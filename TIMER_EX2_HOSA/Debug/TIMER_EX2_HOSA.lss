
TIMER_EX2_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000041ac  00004240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800168  00800168  00004348  2**0
                  ALLOC
  3 .stab         00005694  00000000  00000000  00004348  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002098  00000000  00000000  000099dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000ba74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000bc54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000be86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000e717  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000fd3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00011120  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00011320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0001162f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012085  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 36       	cpi	r26, 0x6B	; 107
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ea       	ldi	r30, 0xAC	; 172
      78:	f1 e4       	ldi	r31, 0x41	; 65
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <main>
      8a:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 00 20 	jmp	0x4000	; 0x4000 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gesf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gesf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gesf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 01 20 	jmp	0x4002	; 0x4002 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 08 20 	jmp	0x4010	; 0x4010 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 00 20 	jmp	0x4000	; 0x4000 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <USART_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the USART Module to start functionality
void USART_Init(uint32 baudRate) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <USART_Init+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <USART_Init+0x8>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <USART_Init+0xa>
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	6b 83       	std	Y+3, r22	; 0x03
     f5a:	7c 83       	std	Y+4, r23	; 0x04
     f5c:	8d 83       	std	Y+5, r24	; 0x05
     f5e:	9e 83       	std	Y+6, r25	; 0x06

	// To initialize this Init Function, i need to:
	// Tweak the Frame
	// Set the baud rate

	uint16 UBBR_Value = 0;
     f60:	1a 82       	std	Y+2, r1	; 0x02
     f62:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);
     f64:	ab e2       	ldi	r26, 0x2B	; 43
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	eb e2       	ldi	r30, 0x2B	; 43
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	8c 93       	st	X, r24

	SET_BIT(UCSRB, TXEN);
     f72:	aa e2       	ldi	r26, 0x2A	; 42
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ea e2       	ldi	r30, 0x2A	; 42
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	88 60       	ori	r24, 0x08	; 8
     f7e:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
     f80:	aa e2       	ldi	r26, 0x2A	; 42
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ea e2       	ldi	r30, 0x2A	; 42
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 61       	ori	r24, 0x10	; 16
     f8c:	8c 93       	st	X, r24

	SET_BIT(UCSRC, URSEL);
     f8e:	a0 e4       	ldi	r26, 0x40	; 64
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e0 e4       	ldi	r30, 0x40	; 64
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 68       	ori	r24, 0x80	; 128
     f9a:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UMSEL);
     f9c:	a0 e4       	ldi	r26, 0x40	; 64
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e0 e4       	ldi	r30, 0x40	; 64
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8f 7b       	andi	r24, 0xBF	; 191
     fa8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, TXEN);
     faa:	a0 e4       	ldi	r26, 0x40	; 64
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e0 e4       	ldi	r30, 0x40	; 64
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	88 60       	ori	r24, 0x08	; 8
     fb6:	8c 93       	st	X, r24

	CLR_BIT(UCSRC, UCSZ2);
     fb8:	a0 e4       	ldi	r26, 0x40	; 64
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e0 e4       	ldi	r30, 0x40	; 64
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8b 7f       	andi	r24, 0xFB	; 251
     fc4:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
     fc6:	a0 e4       	ldi	r26, 0x40	; 64
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e0 e4       	ldi	r30, 0x40	; 64
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	84 60       	ori	r24, 0x04	; 4
     fd2:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
     fd4:	a0 e4       	ldi	r26, 0x40	; 64
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e0 e4       	ldi	r30, 0x40	; 64
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	82 60       	ori	r24, 0x02	; 2
     fe0:	8c 93       	st	X, r24

	// UBBRH = 0;
	// UBBRL = 207;
	// (0000) (1100 1111) 12 bits, (0000) is for UBBRH, (1100 1111) if for UBBRL

	UBBR_Value = (uint16) ( ( (F_CPU) / (8 * baudRate * 8UL) ) - 1 );
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	ad 81       	ldd	r26, Y+5	; 0x05
     fe8:	be 81       	ldd	r27, Y+6	; 0x06
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	aa 1f       	adc	r26, r26
     ff0:	bb 1f       	adc	r27, r27
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	aa 1f       	adc	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	aa 1f       	adc	r26, r26
    1000:	bb 1f       	adc	r27, r27
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	aa 1f       	adc	r26, r26
    1008:	bb 1f       	adc	r27, r27
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	aa 1f       	adc	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	aa 1f       	adc	r26, r26
    1018:	bb 1f       	adc	r27, r27
    101a:	9c 01       	movw	r18, r24
    101c:	ad 01       	movw	r20, r26
    101e:	80 e4       	ldi	r24, 0x40	; 64
    1020:	92 e4       	ldi	r25, 0x42	; 66
    1022:	af e0       	ldi	r26, 0x0F	; 15
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__udivmodsi4>
    102e:	da 01       	movw	r26, r20
    1030:	c9 01       	movw	r24, r18
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBBR_Value >> 8;
    1038:	e0 e4       	ldi	r30, 0x40	; 64
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	89 2f       	mov	r24, r25
    1042:	99 27       	eor	r25, r25
    1044:	80 83       	st	Z, r24
	// Because I want the 4 Zeroes in it

	UBRRL = UBBR_Value;
    1046:	e9 e2       	ldi	r30, 0x29	; 41
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	80 83       	st	Z, r24
	// Because I want the actual value

}
    104e:	26 96       	adiw	r28, 0x06	; 6
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <USART_sendByte>:


// Responsible for the USART to send a byte
void USART_sendByte(const uint8 data) {
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	0f 92       	push	r0
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	89 83       	std	Y+1, r24	; 0x01
	  *  Bit 5 – UDRE: USART Data Register Empty
	  *
	  *  UDRE flag is set when the TX Buffer (UDR) is empty and ready
	  *  for transmitting a new byte waiting untill this flag is set to '1'
	  */
	while(BIT_IS_CLR(UCSRA,UDRE)) {
    106c:	eb e2       	ldi	r30, 0x2B	; 43
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	80 72       	andi	r24, 0x20	; 32
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	b9 f3       	breq	.-18     	; 0x106c <USART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    107e:	ec e2       	ldi	r30, 0x2C	; 44
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	80 83       	st	Z, r24

	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	// This is waiting for the flag to be set to '0' to know that I received data
	*******************************************************************/
}
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <USART_receiveByte>:


// Responsible for the USART to receive a byte
uint8 USART_receiveByte(void) {
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
	/* UCSRA - USART Control and Status Register A
	  *  Bit 7 – RXC: USART Receive Complete, when it receives data, the flag = 0
	  */

	while ( BIT_IS_CLR(UCSRA, RXC) );
    1096:	eb e2       	ldi	r30, 0x2B	; 43
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	88 23       	and	r24, r24
    109e:	dc f7       	brge	.-10     	; 0x1096 <USART_receiveByte+0x8>
	// This is waiting for the flag to be set to '0' to know that I received data

	// When reading
	return UDR;
    10a0:	ec e2       	ldi	r30, 0x2C	; 44
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <USART_sendString>:


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <USART_sendString+0x6>
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9b 83       	std	Y+3, r25	; 0x03
    10ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    10bc:	19 82       	std	Y+1, r1	; 0x01
    10be:	0e c0       	rjmp	.+28     	; 0x10dc <USART_sendString+0x30>
	while (str[i] != '\0') {
		USART_sendByte(str[i]);
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	fc 01       	movw	r30, r24
    10cc:	e2 0f       	add	r30, r18
    10ce:	f3 1f       	adc	r31, r19
    10d0:	80 81       	ld	r24, Z
    10d2:	0e 94 30 08 	call	0x1060	; 0x1060 <USART_sendByte>
		i++;
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	89 83       	std	Y+1, r24	; 0x01


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
	uint8 i = 0;
	while (str[i] != '\0') {
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	fc 01       	movw	r30, r24
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	80 81       	ld	r24, Z
    10ee:	88 23       	and	r24, r24
    10f0:	39 f7       	brne	.-50     	; 0x10c0 <USART_sendString+0x14>
		USART_sendByte(str[i]);
		i++;
	}
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <USART_receiveString>:


// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <USART_receiveString+0xa>
    1108:	0f 92       	push	r0
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9b 83       	std	Y+3, r25	; 0x03
    1110:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1112:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	9b 81       	ldd	r25, Y+3	; 0x03
    111e:	8c 01       	movw	r16, r24
    1120:	02 0f       	add	r16, r18
    1122:	13 1f       	adc	r17, r19
    1124:	0e 94 47 08 	call	0x108e	; 0x108e <USART_receiveByte>
    1128:	f8 01       	movw	r30, r16
    112a:	80 83       	st	Z, r24
    112c:	0f c0       	rjmp	.+30     	; 0x114c <USART_receiveString+0x4e>

	while (str[i] != '#') {
		i++;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	8f 5f       	subi	r24, 0xFF	; 255
    1132:	89 83       	std	Y+1, r24	; 0x01
		str[i] = USART_receiveByte();
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	8c 01       	movw	r16, r24
    1140:	02 0f       	add	r16, r18
    1142:	13 1f       	adc	r17, r19
    1144:	0e 94 47 08 	call	0x108e	; 0x108e <USART_receiveByte>
    1148:	f8 01       	movw	r30, r16
    114a:	80 83       	st	Z, r24
// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
	uint8 i = 0;
	str[i] = USART_receiveByte();

	while (str[i] != '#') {
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	9b 81       	ldd	r25, Y+3	; 0x03
    1156:	fc 01       	movw	r30, r24
    1158:	e2 0f       	add	r30, r18
    115a:	f3 1f       	adc	r31, r19
    115c:	80 81       	ld	r24, Z
    115e:	83 32       	cpi	r24, 0x23	; 35
    1160:	31 f7       	brne	.-52     	; 0x112e <USART_receiveString+0x30>
		i++;
		str[i] = USART_receiveByte();
	}
	str[i] = '\0'; // replacing the '#' with '\0'
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	fc 01       	movw	r30, r24
    116e:	e2 0f       	add	r30, r18
    1170:	f3 1f       	adc	r31, r19
    1172:	10 82       	st	Z, r1
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <Timer0_setPrescaler>:

/*******************************************************************************
 *                              					Module Implementation                           					  *
 *******************************************************************************/

void Timer0_setPrescaler(void) {
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
#if (PRESCALER_VALUE == PRESCALER_1024)
	TCCR0 = (1<<CS02) | (1<<CS00);
    118c:	e3 e5       	ldi	r30, 0x53	; 83
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	85 e0       	ldi	r24, 0x05	; 5
    1192:	80 83       	st	Z, r24
	CLR_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);
#else
	TCCR0 = (1<<CS02) | (1<<CS00);
#endif
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <Timer0_setMode>:

void Timer0_setMode(void) {
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
#if (TIMER_MODE == NORMAL_MODE)
	Timer0_normalMode();
    11a2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Timer0_normalMode>
#elif (TIMER_MODE == PWM_MODE)
	Timer0_fastPWMMode();
#else
	Timer0_normalMode();
#endif
}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <Timer0_normalMode>:

void Timer0_normalMode(void) {
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, FOC0);
    11b4:	a3 e5       	ldi	r26, 0x53	; 83
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e3 e5       	ldi	r30, 0x53	; 83
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    11c2:	a3 e5       	ldi	r26, 0x53	; 83
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e3 e5       	ldi	r30, 0x53	; 83
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8f 7b       	andi	r24, 0xBF	; 191
    11ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    11d0:	a3 e5       	ldi	r26, 0x53	; 83
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e3 e5       	ldi	r30, 0x53	; 83
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	87 7f       	andi	r24, 0xF7	; 247
    11dc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM01);
    11de:	a3 e5       	ldi	r26, 0x53	; 83
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e3 e5       	ldi	r30, 0x53	; 83
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	8f 7d       	andi	r24, 0xDF	; 223
    11ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
    11ec:	a3 e5       	ldi	r26, 0x53	; 83
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e3 e5       	ldi	r30, 0x53	; 83
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 7e       	andi	r24, 0xEF	; 239
    11f8:	8c 93       	st	X, r24
#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
	SET_BIT(TIMSK, TOIE0);
    11fa:	a9 e5       	ldi	r26, 0x59	; 89
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e9 e5       	ldi	r30, 0x59	; 89
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	81 60       	ori	r24, 0x01	; 1
    1206:	8c 93       	st	X, r24
#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
	CLR_BIT(TIMSK, TOIE0);
#endif
}
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <Timer0_compareMode>:

void Timer0_compareMode(void) {
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, FOC0);
    1216:	a3 e5       	ldi	r26, 0x53	; 83
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e3 e5       	ldi	r30, 0x53	; 83
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 68       	ori	r24, 0x80	; 128
    1222:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    1224:	a3 e5       	ldi	r26, 0x53	; 83
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e3 e5       	ldi	r30, 0x53	; 83
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 7b       	andi	r24, 0xBF	; 191
    1230:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1232:	a3 e5       	ldi	r26, 0x53	; 83
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e3 e5       	ldi	r30, 0x53	; 83
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	88 60       	ori	r24, 0x08	; 8
    123e:	8c 93       	st	X, r24
#if (CTC_MODE == CTC_NORMAL)
	CLR_BIT(TCCR0, COM01);
	CLR_BIT(TCCR0, COM00);
#elif (CTC_MODE == CTC_TOGGLE)
	CLR_BIT(TCCR0, COM01);
    1240:	a3 e5       	ldi	r26, 0x53	; 83
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e3 e5       	ldi	r30, 0x53	; 83
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	8f 7d       	andi	r24, 0xDF	; 223
    124c:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM00);
    124e:	a3 e5       	ldi	r26, 0x53	; 83
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e3 e5       	ldi	r30, 0x53	; 83
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 61       	ori	r24, 0x10	; 16
    125a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
#elif (CTC_MODE == CTC_SET)
	SET_BIT(TCCR0, COM01);
	SET_BIT(TCCR0, COM00);
#endif
}
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <Timer0_fastPWMMode>:

void Timer0_fastPWMMode(void) {
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, FOC0);
    126a:	a3 e5       	ldi	r26, 0x53	; 83
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e3 e5       	ldi	r30, 0x53	; 83
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8f 77       	andi	r24, 0x7F	; 127
    1276:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM00);
    1278:	a3 e5       	ldi	r26, 0x53	; 83
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e3 e5       	ldi	r30, 0x53	; 83
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 64       	ori	r24, 0x40	; 64
    1284:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1286:	a3 e5       	ldi	r26, 0x53	; 83
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e3 e5       	ldi	r30, 0x53	; 83
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	88 60       	ori	r24, 0x08	; 8
    1292:	8c 93       	st	X, r24
#if (FASTPWM_MODE == FASTPWM_NORMAL)
	CLR_BIT(TCCR0, COM01);
	CLR_BIT(TCCR0, COM00);
#elif (FASTPWM_MODE == FASTPWM_NOINVERT)
	SET_BIT(TCCR0, COM01);
    1294:	a3 e5       	ldi	r26, 0x53	; 83
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e3 e5       	ldi	r30, 0x53	; 83
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 62       	ori	r24, 0x20	; 32
    12a0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
    12a2:	a3 e5       	ldi	r26, 0x53	; 83
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e3 e5       	ldi	r30, 0x53	; 83
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7e       	andi	r24, 0xEF	; 239
    12ae:	8c 93       	st	X, r24
#elif (FASTPWM_MODE == FASTPWM_INVERT)
	SET_BIT(TCCR0, COM01);
	SET_BIT(TCCR0, COM00);
#endif
}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <Timer1_setPrescaler>:



void Timer1_setPrescaler(void) {
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	switch(PRESCALER_VALUE) {
		case PRESCALER_1024:
			SET_BIT(TCCR1B, CS10);
    12be:	ae e4       	ldi	r26, 0x4E	; 78
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ee e4       	ldi	r30, 0x4E	; 78
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	81 60       	ori	r24, 0x01	; 1
    12ca:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, CS11);
    12cc:	ae e4       	ldi	r26, 0x4E	; 78
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ee e4       	ldi	r30, 0x4E	; 78
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8d 7f       	andi	r24, 0xFD	; 253
    12d8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, CS12);
    12da:	ae e4       	ldi	r26, 0x4E	; 78
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ee e4       	ldi	r30, 0x4E	; 78
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	84 60       	ori	r24, 0x04	; 4
    12e6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, CS10);
			CLR_BIT(TCCR1B, CS11);
			CLR_BIT(TCCR1B, CS12);
		break;
	}
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <Timer1_setMode>:

void Timer1_setMode(void) {
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62

		default:
			Timer1_normalMode();
		break;
	}*/
}
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <Timer2_setPrescaler>:
#endif
}
*/


void Timer2_setPrescaler(void) {
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	switch(PRESCALER_VALUE) {
		case PRESCALER_1024:
			SET_BIT(TCCR2, CS20);
    1304:	a5 e4       	ldi	r26, 0x45	; 69
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e5 e4       	ldi	r30, 0x45	; 69
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	81 60       	ori	r24, 0x01	; 1
    1310:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, CS21);
    1312:	a5 e4       	ldi	r26, 0x45	; 69
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e5 e4       	ldi	r30, 0x45	; 69
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8d 7f       	andi	r24, 0xFD	; 253
    131e:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS22);
    1320:	a5 e4       	ldi	r26, 0x45	; 69
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e4       	ldi	r30, 0x45	; 69
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	84 60       	ori	r24, 0x04	; 4
    132c:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS20);
			CLR_BIT(TCCR2, CS21);
			CLR_BIT(TCCR2, CS22);
		break;
	}
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <Timer2_setMode>:

void Timer2_setMode(void) {
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62

		default:
			Timer2_normalMode();
		break;
	}*/
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <Timer0_Init>:
}
*/

// Initializes and enables the Master mode for the TWI Module to start functionality
#if (TIMER_SELECT == TIMER0)
	void Timer0_Init() {
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
		Timer0_setPrescaler();
    134a:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer0_setPrescaler>
		Timer0_setMode();
    134e:	0e 94 cd 08 	call	0x119a	; 0x119a <Timer0_setMode>
	}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <Timer_setNormalDelay>:
		Timer2_setMode();
	}
#endif


void Timer_setNormalDelay(float32 timeDelay) {
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	61 97       	sbiw	r28, 0x11	; 17
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	6e 87       	std	Y+14, r22	; 0x0e
    136e:	7f 87       	std	Y+15, r23	; 0x0f
    1370:	88 8b       	std	Y+16, r24	; 0x10
    1372:	99 8b       	std	Y+17, r25	; 0x11
	// Compares overflow counter with overflow amount in a loop
	// Executes a busy wait function
	// Then clears the TIFR by setting it
	// Iterates Overflow Counter

	float32 	tickTime 					= 0;
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a0 e0       	ldi	r26, 0x00	; 0
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	8a 87       	std	Y+10, r24	; 0x0a
    137e:	9b 87       	std	Y+11, r25	; 0x0b
    1380:	ac 87       	std	Y+12, r26	; 0x0c
    1382:	bd 87       	std	Y+13, r27	; 0x0d
	float32 	maxDelayTime 		= 0;
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e0       	ldi	r26, 0x00	; 0
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	8e 83       	std	Y+6, r24	; 0x06
    138e:	9f 83       	std	Y+7, r25	; 0x07
    1390:	a8 87       	std	Y+8, r26	; 0x08
    1392:	b9 87       	std	Y+9, r27	; 0x09
	float32 	overflowAmount 	= 0;
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	8a 83       	std	Y+2, r24	; 0x02
    139e:	9b 83       	std	Y+3, r25	; 0x03
    13a0:	ac 83       	std	Y+4, r26	; 0x04
    13a2:	bd 83       	std	Y+5, r27	; 0x05
	uint8 		overFlowCounter 	= 0;
    13a4:	19 82       	std	Y+1, r1	; 0x01

	tickTime = PRESCALER_VALUE / (float)F_CPU;
    13a6:	8d eb       	ldi	r24, 0xBD	; 189
    13a8:	97 e3       	ldi	r25, 0x37	; 55
    13aa:	a6 e8       	ldi	r26, 0x86	; 134
    13ac:	ba e3       	ldi	r27, 0x3A	; 58
    13ae:	8a 87       	std	Y+10, r24	; 0x0a
    13b0:	9b 87       	std	Y+11, r25	; 0x0b
    13b2:	ac 87       	std	Y+12, r26	; 0x0c
    13b4:	bd 87       	std	Y+13, r27	; 0x0d
	maxDelayTime = tickTime * 256; 		// 2^n = 256
    13b6:	6a 85       	ldd	r22, Y+10	; 0x0a
    13b8:	7b 85       	ldd	r23, Y+11	; 0x0b
    13ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    13bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e8       	ldi	r20, 0x80	; 128
    13c4:	53 e4       	ldi	r21, 0x43	; 67
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8e 83       	std	Y+6, r24	; 0x06
    13d0:	9f 83       	std	Y+7, r25	; 0x07
    13d2:	a8 87       	std	Y+8, r26	; 0x08
    13d4:	b9 87       	std	Y+9, r27	; 0x09
	overflowAmount = ceil((timeDelay) / (maxDelayTime));
    13d6:	6e 85       	ldd	r22, Y+14	; 0x0e
    13d8:	7f 85       	ldd	r23, Y+15	; 0x0f
    13da:	88 89       	ldd	r24, Y+16	; 0x10
    13dc:	99 89       	ldd	r25, Y+17	; 0x11
    13de:	2e 81       	ldd	r18, Y+6	; 0x06
    13e0:	3f 81       	ldd	r19, Y+7	; 0x07
    13e2:	48 85       	ldd	r20, Y+8	; 0x08
    13e4:	59 85       	ldd	r21, Y+9	; 0x09
    13e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	bc 01       	movw	r22, r24
    13f0:	cd 01       	movw	r24, r26
    13f2:	0e 94 34 20 	call	0x4068	; 0x4068 <ceil>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	8a 83       	std	Y+2, r24	; 0x02
    13fc:	9b 83       	std	Y+3, r25	; 0x03
    13fe:	ac 83       	std	Y+4, r26	; 0x04
    1400:	bd 83       	std	Y+5, r27	; 0x05
	//overflowAmount = floor((timeDelay) / (MaxDelay_Time));

#if (TIMER_SELECT == TIMER0)
	// Using the Timer Overflow Flag TOV
	Timer0_Init();
    1402:	0e 94 a1 09 	call	0x1342	; 0x1342 <Timer0_Init>
    1406:	13 c0       	rjmp	.+38     	; 0x142e <Timer_setNormalDelay+0xd6>
	while (overFlowCounter < overflowAmount) {
		while (BIT_IS_CLR(TIFR, TOV0)) {
    1408:	e8 e5       	ldi	r30, 0x58	; 88
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	90 70       	andi	r25, 0x00	; 0
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	b9 f3       	breq	.-18     	; 0x1408 <Timer_setNormalDelay+0xb0>
			// This function is a Busy Wait
		}
		overFlowCounter++;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	8f 5f       	subi	r24, 0xFF	; 255
    141e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIFR, TOV0);
    1420:	a8 e5       	ldi	r26, 0x58	; 88
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e8 e5       	ldi	r30, 0x58	; 88
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	8c 93       	st	X, r24
	//overflowAmount = floor((timeDelay) / (MaxDelay_Time));

#if (TIMER_SELECT == TIMER0)
	// Using the Timer Overflow Flag TOV
	Timer0_Init();
	while (overFlowCounter < overflowAmount) {
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	aa 27       	eor	r26, r26
    1436:	97 fd       	sbrc	r25, 7
    1438:	a0 95       	com	r26
    143a:	ba 2f       	mov	r27, r26
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	2a 81       	ldd	r18, Y+2	; 0x02
    144e:	3b 81       	ldd	r19, Y+3	; 0x03
    1450:	4c 81       	ldd	r20, Y+4	; 0x04
    1452:	5d 81       	ldd	r21, Y+5	; 0x05
    1454:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	b4 f2       	brlt	.-84     	; 0x1408 <Timer_setNormalDelay+0xb0>
			// This function is a Busy Wait
		}
		overFlowCounter++;
		SET_BIT(TIFR, TOV0);
	}
	overFlowCounter = 0;
    145c:	19 82       	std	Y+1, r1	; 0x01
	Timer0_Init();
    145e:	0e 94 a1 09 	call	0x1342	; 0x1342 <Timer0_Init>
	}
	overFlowCounter = 0;
	TCNT2 = 0x00;

#endif
}
    1462:	61 96       	adiw	r28, 0x11	; 17
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <Timer_setInterruptDelay>:

void Timer_setInterruptDelay(float32 timeDelay) {
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	61 97       	sbiw	r28, 0x11	; 17
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	6e 87       	std	Y+14, r22	; 0x0e
    148a:	7f 87       	std	Y+15, r23	; 0x0f
    148c:	88 8b       	std	Y+16, r24	; 0x10
    148e:	99 8b       	std	Y+17, r25	; 0x11
	// Compares overflow counter with overflow amount in a loop
	// Executes a busy wait function
	// Then clears the TIFR by setting it
	// Iterates Overflow Counter

	float32 	tickTime 					= 0;
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	8a 87       	std	Y+10, r24	; 0x0a
    149a:	9b 87       	std	Y+11, r25	; 0x0b
    149c:	ac 87       	std	Y+12, r26	; 0x0c
    149e:	bd 87       	std	Y+13, r27	; 0x0d
	float32 	maxDelayTime 		= 0;
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a0 e0       	ldi	r26, 0x00	; 0
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	8e 83       	std	Y+6, r24	; 0x06
    14aa:	9f 83       	std	Y+7, r25	; 0x07
    14ac:	a8 87       	std	Y+8, r26	; 0x08
    14ae:	b9 87       	std	Y+9, r27	; 0x09
	float32 	overflowAmount 	= 0;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	9b 83       	std	Y+3, r25	; 0x03
    14bc:	ac 83       	std	Y+4, r26	; 0x04
    14be:	bd 83       	std	Y+5, r27	; 0x05
	uint8 		overFlowCounter 	= 0;
    14c0:	19 82       	std	Y+1, r1	; 0x01

	tickTime = PRESCALER_VALUE / (float)F_CPU;
    14c2:	8d eb       	ldi	r24, 0xBD	; 189
    14c4:	97 e3       	ldi	r25, 0x37	; 55
    14c6:	a6 e8       	ldi	r26, 0x86	; 134
    14c8:	ba e3       	ldi	r27, 0x3A	; 58
    14ca:	8a 87       	std	Y+10, r24	; 0x0a
    14cc:	9b 87       	std	Y+11, r25	; 0x0b
    14ce:	ac 87       	std	Y+12, r26	; 0x0c
    14d0:	bd 87       	std	Y+13, r27	; 0x0d
	maxDelayTime = tickTime * 256; 		// 2^n = 256
    14d2:	6a 85       	ldd	r22, Y+10	; 0x0a
    14d4:	7b 85       	ldd	r23, Y+11	; 0x0b
    14d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	53 e4       	ldi	r21, 0x43	; 67
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	8e 83       	std	Y+6, r24	; 0x06
    14ec:	9f 83       	std	Y+7, r25	; 0x07
    14ee:	a8 87       	std	Y+8, r26	; 0x08
    14f0:	b9 87       	std	Y+9, r27	; 0x09
	overflowAmount = ceil((timeDelay) / (maxDelayTime));
    14f2:	6e 85       	ldd	r22, Y+14	; 0x0e
    14f4:	7f 85       	ldd	r23, Y+15	; 0x0f
    14f6:	88 89       	ldd	r24, Y+16	; 0x10
    14f8:	99 89       	ldd	r25, Y+17	; 0x11
    14fa:	2e 81       	ldd	r18, Y+6	; 0x06
    14fc:	3f 81       	ldd	r19, Y+7	; 0x07
    14fe:	48 85       	ldd	r20, Y+8	; 0x08
    1500:	59 85       	ldd	r21, Y+9	; 0x09
    1502:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 34 20 	call	0x4068	; 0x4068 <ceil>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	8a 83       	std	Y+2, r24	; 0x02
    1518:	9b 83       	std	Y+3, r25	; 0x03
    151a:	ac 83       	std	Y+4, r26	; 0x04
    151c:	bd 83       	std	Y+5, r27	; 0x05
	//overflowAmount = floor((timeDelay) / (MaxDelay_Time));

#if (TIMER_SELECT == TIMER0)
	//Timer0_Init();
	overFlowCounter++;
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	8f 5f       	subi	r24, 0xFF	; 255
    1522:	89 83       	std	Y+1, r24	; 0x01
	if (overFlowCounter == overflowAmount) {
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	aa 27       	eor	r26, r26
    152c:	97 fd       	sbrc	r25, 7
    152e:	a0 95       	com	r26
    1530:	ba 2f       	mov	r27, r26
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	2a 81       	ldd	r18, Y+2	; 0x02
    1544:	3b 81       	ldd	r19, Y+3	; 0x03
    1546:	4c 81       	ldd	r20, Y+4	; 0x04
    1548:	5d 81       	ldd	r21, Y+5	; 0x05
    154a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    154e:	88 23       	and	r24, r24
    1550:	09 f4       	brne	.+2      	; 0x1554 <Timer_setInterruptDelay+0xe0>
		overFlowCounter = 0;
    1552:	19 82       	std	Y+1, r1	; 0x01
	}
	overFlowCounter = 0;
	TCNT2 = 0x00;

#endif
}
    1554:	61 96       	adiw	r28, 0x11	; 17
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <SPI_initMaster>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the Master mode for the SPI Module to start functionality
void SPI_initMaster(void) {
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Output
	 *	MOSI (PB5) --> 	Output
	 *	MISO (PB6) --> 	Input
	 *	SCK (PB7) 	--> 	Output
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_OUTPUT);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	64 e0       	ldi	r22, 0x04	; 4
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_OUTPUT);
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	65 e0       	ldi	r22, 0x05	; 5
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_INPUT);
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	66 e0       	ldi	r22, 0x06	; 6
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_OUTPUT);
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	67 e0       	ldi	r22, 0x07	; 7
    1590:	41 e0       	ldi	r20, 0x01	; 1
    1592:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */

	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1596:	ad e2       	ldi	r26, 0x2D	; 45
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ed e2       	ldi	r30, 0x2D	; 45
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	80 64       	ori	r24, 0x40	; 64
    15a2:	8c 93       	st	X, r24
	SET_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    15a4:	ad e2       	ldi	r26, 0x2D	; 45
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ed e2       	ldi	r30, 0x2D	; 45
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 61       	ori	r24, 0x10	; 16
    15b0:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    15b2:	ad e2       	ldi	r26, 0x2D	; 45
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ed e2       	ldi	r30, 0x2D	; 45
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8d 7f       	andi	r24, 0xFD	; 253
    15be:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    15c0:	ad e2       	ldi	r26, 0x2D	; 45
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ed e2       	ldi	r30, 0x2D	; 45
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8e 7f       	andi	r24, 0xFE	; 254
    15cc:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    15ce:	ae e2       	ldi	r26, 0x2E	; 46
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ee e2       	ldi	r30, 0x2E	; 46
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8e 7f       	andi	r24, 0xFE	; 254
    15da:	8c 93       	st	X, r24

}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <SPI_initSlave>:


// Initializes and enables the Slave mode for the SPI Module to start functionality
void SPI_initSlave(void) {
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Input
	 *	MOSI (PB5) --> 	Input
	 *	MISO (PB6) --> 	Output
	 *	SCK (PB7) 	--> 	Input
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_INPUT);
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	64 e0       	ldi	r22, 0x04	; 4
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_INPUT);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	65 e0       	ldi	r22, 0x05	; 5
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_OUTPUT);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	66 e0       	ldi	r22, 0x06	; 6
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_INPUT);
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	67 e0       	ldi	r22, 0x07	; 7
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	  *  Bit 4 – MSTR: Master/Slave Select
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */
	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1612:	ad e2       	ldi	r26, 0x2D	; 45
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ed e2       	ldi	r30, 0x2D	; 45
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 64       	ori	r24, 0x40	; 64
    161e:	8c 93       	st	X, r24
	CLR_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    1620:	ad e2       	ldi	r26, 0x2D	; 45
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	ed e2       	ldi	r30, 0x2D	; 45
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8f 7e       	andi	r24, 0xEF	; 239
    162c:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    162e:	ad e2       	ldi	r26, 0x2D	; 45
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ed e2       	ldi	r30, 0x2D	; 45
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8d 7f       	andi	r24, 0xFD	; 253
    163a:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    163c:	ad e2       	ldi	r26, 0x2D	; 45
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ed e2       	ldi	r30, 0x2D	; 45
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8e 7f       	andi	r24, 0xFE	; 254
    1648:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    164a:	ae e2       	ldi	r26, 0x2E	; 46
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ee e2       	ldi	r30, 0x2E	; 46
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8e 7f       	andi	r24, 0xFE	; 254
    1656:	8c 93       	st	X, r24

}
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <SPI_sendReceiveByte>:


// Responsible for the SPI to send & receive a byte
uint8 SPI_sendReceiveByte(uint8 data) {
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	89 83       	std	Y+1, r24	; 0x01

	SPDR = data;
    166a:	ef e2       	ldi	r30, 0x2F	; 47
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	80 83       	st	Z, r24

	while(BIT_IS_CLR(SPSR, SPIF)) {
    1672:	ee e2       	ldi	r30, 0x2E	; 46
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	88 23       	and	r24, r24
    167a:	dc f7       	brge	.-10     	; 0x1672 <SPI_sendReceiveByte+0x14>
		 * flag is set, Master will set SS to low to generate clock on SCK pin
		 */
	}

	// after SPIF is set, then I return the data
	return SPDR;
    167c:	ef e2       	ldi	r30, 0x2F	; 47
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
}
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <SPI_sendString>:

void SPI_sendString(const uint8 *str) {
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <SPI_sendString+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <SPI_sendString+0x8>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    169a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 receivedData = 0;
    169c:	19 82       	std	Y+1, r1	; 0x01
    169e:	0f c0       	rjmp	.+30     	; 0x16be <SPI_sendString+0x34>

	while (str[i] != '\0') {
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	fc 01       	movw	r30, r24
    16ac:	e2 0f       	add	r30, r18
    16ae:	f3 1f       	adc	r31, r19
    16b0:	80 81       	ld	r24, Z
    16b2:	0e 94 2f 0b 	call	0x165e	; 0x165e <SPI_sendReceiveByte>
    16b6:	89 83       	std	Y+1, r24	; 0x01
		i++;
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	8f 5f       	subi	r24, 0xFF	; 255
    16bc:	8a 83       	std	Y+2, r24	; 0x02

void SPI_sendString(const uint8 *str) {
	uint8 i = 0;
	uint8 receivedData = 0;

	while (str[i] != '\0') {
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	fc 01       	movw	r30, r24
    16ca:	e2 0f       	add	r30, r18
    16cc:	f3 1f       	adc	r31, r19
    16ce:	80 81       	ld	r24, Z
    16d0:	88 23       	and	r24, r24
    16d2:	31 f7       	brne	.-52     	; 0x16a0 <SPI_sendString+0x16>
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
		i++;
	}

}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <SPI_receiveString>:


void SPI_receiveString(uint8 *str) {
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <SPI_receiveString+0xa>
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	9b 83       	std	Y+3, r25	; 0x03
    16f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    16f6:	19 82       	std	Y+1, r1	; 0x01
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	9b 81       	ldd	r25, Y+3	; 0x03
    1702:	8c 01       	movw	r16, r24
    1704:	02 0f       	add	r16, r18
    1706:	13 1f       	adc	r17, r19
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	0e 94 2f 0b 	call	0x165e	; 0x165e <SPI_sendReceiveByte>
    170e:	f8 01       	movw	r30, r16
    1710:	80 83       	st	Z, r24
    1712:	10 c0       	rjmp	.+32     	; 0x1734 <SPI_receiveString+0x52>


	while (str[i] != '#') {
		i++; // why the incrementer above?
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	8f 5f       	subi	r24, 0xFF	; 255
    1718:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	9b 81       	ldd	r25, Y+3	; 0x03
    1724:	8c 01       	movw	r16, r24
    1726:	02 0f       	add	r16, r18
    1728:	13 1f       	adc	r17, r19
    172a:	8f ef       	ldi	r24, 0xFF	; 255
    172c:	0e 94 2f 0b 	call	0x165e	; 0x165e <SPI_sendReceiveByte>
    1730:	f8 01       	movw	r30, r16
    1732:	80 83       	st	Z, r24
	uint8 i = 0;
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);


	while (str[i] != '#') {
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	fc 01       	movw	r30, r24
    1740:	e2 0f       	add	r30, r18
    1742:	f3 1f       	adc	r31, r19
    1744:	80 81       	ld	r24, Z
    1746:	83 32       	cpi	r24, 0x23	; 35
    1748:	29 f7       	brne	.-54     	; 0x1714 <SPI_receiveString+0x32>
		i++; // why the incrementer above?
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
	}

	str[i] = '\0'; // replacing the '#' with '\0'
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	9b 81       	ldd	r25, Y+3	; 0x03
    1754:	fc 01       	movw	r30, r24
    1756:	e2 0f       	add	r30, r18
    1758:	f3 1f       	adc	r31, r19
    175a:	10 82       	st	Z, r1

}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <ICU_Init>:
#include <util/delay.h>
//#include <avr/interrupt.h>


// Initializes and enables the ADC Module to start functionality
void ICU_Init(void) {
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	 * 2 – FOC1B: Force Output Compare for Compare unit B
	 * 1:0 – WGM11:0: Waveform Generation Mode
	 */

	// Clears COM1A1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1A1);
    1774:	af e4       	ldi	r26, 0x4F	; 79
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ef e4       	ldi	r30, 0x4F	; 79
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8f 77       	andi	r24, 0x7F	; 127
    1780:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    1782:	af e4       	ldi	r26, 0x4F	; 79
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	ef e4       	ldi	r30, 0x4F	; 79
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8f 7b       	andi	r24, 0xBF	; 191
    178e:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1B1);
    1790:	af e4       	ldi	r26, 0x4F	; 79
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ef e4       	ldi	r30, 0x4F	; 79
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8f 7d       	andi	r24, 0xDF	; 223
    179c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    179e:	af e4       	ldi	r26, 0x4F	; 79
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	ef e4       	ldi	r30, 0x4F	; 79
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8f 7e       	andi	r24, 0xEF	; 239
    17aa:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1A);
    17ac:	af e4       	ldi	r26, 0x4F	; 79
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ef e4       	ldi	r30, 0x4F	; 79
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 60       	ori	r24, 0x08	; 8
    17b8:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1B);
    17ba:	af e4       	ldi	r26, 0x4F	; 79
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	ef e4       	ldi	r30, 0x4F	; 79
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	84 60       	ori	r24, 0x04	; 4
    17c6:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, WGM11);
    17c8:	af e4       	ldi	r26, 0x4F	; 79
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ef e4       	ldi	r30, 0x4F	; 79
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	8d 7f       	andi	r24, 0xFD	; 253
    17d4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    17d6:	af e4       	ldi	r26, 0x4F	; 79
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	ef e4       	ldi	r30, 0x4F	; 79
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8e 7f       	andi	r24, 0xFE	; 254
    17e2:	8c 93       	st	X, r24
	 * Bit 4:3 – WGM13:2: Waveform Generation Mode
	 * Bit 2:0 – CS12:0: Clock Select
	 */

	// Clears ICNC1 to '0', I DONT want the noise canceling
	CLR_BIT(TCCR1B, ICNC1);
    17e4:	ae e4       	ldi	r26, 0x4E	; 78
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	ee e4       	ldi	r30, 0x4E	; 78
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 77       	andi	r24, 0x7F	; 127
    17f0:	8c 93       	st	X, r24

	// Sets ICES1 to '1', I want the rising edge
	SET_BIT(TCCR1B, ICES1);
    17f2:	ae e4       	ldi	r26, 0x4E	; 78
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ee e4       	ldi	r30, 0x4E	; 78
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	80 64       	ori	r24, 0x40	; 64
    17fe:	8c 93       	st	X, r24

	// Sets CS12:0 to '001', nO PRESCALING
	CLR_BIT(TCCR1B, CS12);
    1800:	ae e4       	ldi	r26, 0x4E	; 78
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ee e4       	ldi	r30, 0x4E	; 78
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8b 7f       	andi	r24, 0xFB	; 251
    180c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    180e:	ae e4       	ldi	r26, 0x4E	; 78
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	ee e4       	ldi	r30, 0x4E	; 78
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	8d 7f       	andi	r24, 0xFD	; 253
    181a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
    181c:	ae e4       	ldi	r26, 0x4E	; 78
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ee e4       	ldi	r30, 0x4E	; 78
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	81 60       	ori	r24, 0x01	; 1
    1828:	8c 93       	st	X, r24

	// Clears TCNT1 to '0', Initialize to '0'
	TCNT1 = 0;
    182a:	ec e4       	ldi	r30, 0x4C	; 76
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	11 82       	std	Z+1, r1	; 0x01
    1830:	10 82       	st	Z, r1

	// Clears ICR1 to '0', Initialize to '0'
	ICR1 = 0;
    1832:	e6 e4       	ldi	r30, 0x46	; 70
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	11 82       	std	Z+1, r1	; 0x01
    1838:	10 82       	st	Z, r1
	 */

	// TIMSK1 |= (1 << TICIE1);
	// SREG |= (1 << 7);

}
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <I2C_init>:
/*******************************************************************************
 *                              					Module Implementation                              					  *
 *******************************************************************************/

// Initializes and enables the Master mode for the TWI Module to start functionality
void I2C_init(void) {
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
	 * In the previous equation, I have two unknowns, the TWBR & TWPS
	 * Its the prescaler bits.. so what to choose?
	 * I know that the SCL is 400 KHz, & F_CPU is 8 MHz
	 * I can control TWPS & let it, TWPS = 0, so TWBR = 2
	 */
	TWSR = 0x00;
    1848:	e1 e2       	ldi	r30, 0x21	; 33
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	10 82       	st	Z, r1
	TWBR = 0x02;
    184e:	e0 e2       	ldi	r30, 0x20	; 32
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	80 83       	st	Z, r24
	TWAR = I2C_SLAVE_ADDR; // Slave Address
    1856:	e2 e2       	ldi	r30, 0x22	; 34
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	80 83       	st	Z, r24
	TWCR = (1 << TWEN); // Enabling the I2C Module
    185e:	e6 e5       	ldi	r30, 0x56	; 86
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	84 e0       	ldi	r24, 0x04	; 4
    1864:	80 83       	st	Z, r24

}
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <I2C_start>:

// Responsible for the SPI to send an array of bytes, a string
void I2C_start(void) {
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
	// Again enabling the I2C Module, Set the Start Condition, Clearing the TWINT Flag
	/* But why I'm not using the normal set bit technique?
	 * Because I don't want to keep old data, & I want the information always set by me
	 */
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    1874:	e6 e5       	ldi	r30, 0x56	; 86
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	84 ea       	ldi	r24, 0xA4	; 164
    187a:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    187c:	e6 e5       	ldi	r30, 0x56	; 86
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	88 23       	and	r24, r24
    1884:	dc f7       	brge	.-10     	; 0x187c <I2C_start+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that start bit is send successfully
	}
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <I2C_stop>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_stop(void) {
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTO);
    1894:	e6 e5       	ldi	r30, 0x56	; 86
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	84 e9       	ldi	r24, 0x94	; 148
    189a:	80 83       	st	Z, r24
}
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <I2C_writeByte>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_writeByte(uint8 data) {
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	0f 92       	push	r0
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWEN) | (1 << TWINT);
    18ae:	e6 e5       	ldi	r30, 0x56	; 86
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	84 e8       	ldi	r24, 0x84	; 132
    18b4:	80 83       	st	Z, r24
	TWDR = data;
    18b6:	e3 e2       	ldi	r30, 0x23	; 35
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    18be:	e6 e5       	ldi	r30, 0x56	; 86
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	88 23       	and	r24, r24
    18c6:	dc f7       	brge	.-10     	; 0x18be <I2C_writeByte+0x1c>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
}
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <I2C_readByteWithACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithACK(void) {
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    18d8:	e6 e5       	ldi	r30, 0x56	; 86
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	84 ec       	ldi	r24, 0xC4	; 196
    18de:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    18e0:	e6 e5       	ldi	r30, 0x56	; 86
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	88 23       	and	r24, r24
    18e8:	dc f7       	brge	.-10     	; 0x18e0 <I2C_readByteWithACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    18ea:	e3 e2       	ldi	r30, 0x23	; 35
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
}
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <I2C_readByteWithNACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithNACK(void) {
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT);
    18fe:	e6 e5       	ldi	r30, 0x56	; 86
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	84 e8       	ldi	r24, 0x84	; 132
    1904:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1906:	e6 e5       	ldi	r30, 0x56	; 86
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	88 23       	and	r24, r24
    190e:	dc f7       	brge	.-10     	; 0x1906 <I2C_readByteWithNACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1910:	e3 e2       	ldi	r30, 0x23	; 35
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
}
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <I2C_getStatus>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_getStatus(void) {
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	0f 92       	push	r0
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	uint8 I2CStatus;
	I2CStatus = TWSR & I2C_INITIALSTATUS;
    1926:	e1 e2       	ldi	r30, 0x21	; 33
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	88 7f       	andi	r24, 0xF8	; 248
    192e:	89 83       	std	Y+1, r24	; 0x01
	return I2CStatus;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
}
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <GPIO_setupPinDirection+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <GPIO_setupPinDirection+0x8>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <GPIO_setupPinDirection+0xa>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	8a 83       	std	Y+2, r24	; 0x02
    194a:	6b 83       	std	Y+3, r22	; 0x03
    194c:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    194e:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	18 f0       	brcs	.+6      	; 0x195c <GPIO_setupPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	e1 c0       	rjmp	.+450    	; 0x1b1e <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	84 30       	cpi	r24, 0x04	; 4
    1960:	18 f0       	brcs	.+6      	; 0x1968 <GPIO_setupPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	db c0       	rjmp	.+438    	; 0x1b1e <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	88 23       	and	r24, r24
    196c:	31 f0       	breq	.+12     	; 0x197a <GPIO_setupPinDirection+0x40>
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	19 f0       	breq	.+6      	; 0x197a <GPIO_setupPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	d2 c0       	rjmp	.+420    	; 0x1b1e <GPIO_setupPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	3e 83       	std	Y+6, r19	; 0x06
    1982:	2d 83       	std	Y+5, r18	; 0x05
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	91 05       	cpc	r25, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <GPIO_setupPinDirection+0x56>
    198e:	43 c0       	rjmp	.+134    	; 0x1a16 <GPIO_setupPinDirection+0xdc>
    1990:	2d 81       	ldd	r18, Y+5	; 0x05
    1992:	3e 81       	ldd	r19, Y+6	; 0x06
    1994:	22 30       	cpi	r18, 0x02	; 2
    1996:	31 05       	cpc	r19, r1
    1998:	2c f4       	brge	.+10     	; 0x19a4 <GPIO_setupPinDirection+0x6a>
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	71 f0       	breq	.+28     	; 0x19be <GPIO_setupPinDirection+0x84>
    19a2:	bc c0       	rjmp	.+376    	; 0x1b1c <GPIO_setupPinDirection+0x1e2>
    19a4:	2d 81       	ldd	r18, Y+5	; 0x05
    19a6:	3e 81       	ldd	r19, Y+6	; 0x06
    19a8:	22 30       	cpi	r18, 0x02	; 2
    19aa:	31 05       	cpc	r19, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <GPIO_setupPinDirection+0x76>
    19ae:	5f c0       	rjmp	.+190    	; 0x1a6e <GPIO_setupPinDirection+0x134>
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	09 f4       	brne	.+2      	; 0x19bc <GPIO_setupPinDirection+0x82>
    19ba:	85 c0       	rjmp	.+266    	; 0x1ac6 <GPIO_setupPinDirection+0x18c>
    19bc:	af c0       	rjmp	.+350    	; 0x1b1c <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	a1 f4       	brne	.+40     	; 0x19ec <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
    19c4:	aa e3       	ldi	r26, 0x3A	; 58
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ea e3       	ldi	r30, 0x3A	; 58
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	48 2f       	mov	r20, r24
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 2e       	mov	r0, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <GPIO_setupPinDirection+0xa8>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 94       	dec	r0
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <GPIO_setupPinDirection+0xa4>
    19e6:	84 2b       	or	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	98 c0       	rjmp	.+304    	; 0x1b1c <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
    19ec:	aa e3       	ldi	r26, 0x3A	; 58
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ea e3       	ldi	r30, 0x3A	; 58
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <GPIO_setupPinDirection+0xd0>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <GPIO_setupPinDirection+0xcc>
    1a0e:	80 95       	com	r24
    1a10:	84 23       	and	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	83 c0       	rjmp	.+262    	; 0x1b1c <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	a1 f4       	brne	.+40     	; 0x1a44 <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
    1a1c:	a7 e3       	ldi	r26, 0x37	; 55
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e7 e3       	ldi	r30, 0x37	; 55
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 2e       	mov	r0, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <GPIO_setupPinDirection+0x100>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	0a 94       	dec	r0
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <GPIO_setupPinDirection+0xfc>
    1a3e:	84 2b       	or	r24, r20
    1a40:	8c 93       	st	X, r24
    1a42:	6c c0       	rjmp	.+216    	; 0x1b1c <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
    1a44:	a7 e3       	ldi	r26, 0x37	; 55
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e7 e3       	ldi	r30, 0x37	; 55
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <GPIO_setupPinDirection+0x128>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <GPIO_setupPinDirection+0x124>
    1a66:	80 95       	com	r24
    1a68:	84 23       	and	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	57 c0       	rjmp	.+174    	; 0x1b1c <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	a1 f4       	brne	.+40     	; 0x1a9c <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    1a74:	a4 e3       	ldi	r26, 0x34	; 52
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e4 e3       	ldi	r30, 0x34	; 52
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	48 2f       	mov	r20, r24
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	02 2e       	mov	r0, r18
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <GPIO_setupPinDirection+0x158>
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	0a 94       	dec	r0
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <GPIO_setupPinDirection+0x154>
    1a96:	84 2b       	or	r24, r20
    1a98:	8c 93       	st	X, r24
    1a9a:	40 c0       	rjmp	.+128    	; 0x1b1c <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    1a9c:	a4 e3       	ldi	r26, 0x34	; 52
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e4 e3       	ldi	r30, 0x34	; 52
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <GPIO_setupPinDirection+0x180>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <GPIO_setupPinDirection+0x17c>
    1abe:	80 95       	com	r24
    1ac0:	84 23       	and	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	2b c0       	rjmp	.+86     	; 0x1b1c <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	a1 f4       	brne	.+40     	; 0x1af4 <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    1acc:	a1 e3       	ldi	r26, 0x31	; 49
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e1 e3       	ldi	r30, 0x31	; 49
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 2e       	mov	r0, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <GPIO_setupPinDirection+0x1b0>
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	0a 94       	dec	r0
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <GPIO_setupPinDirection+0x1ac>
    1aee:	84 2b       	or	r24, r20
    1af0:	8c 93       	st	X, r24
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    1af4:	a1 e3       	ldi	r26, 0x31	; 49
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e1 e3       	ldi	r30, 0x31	; 49
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <GPIO_setupPinDirection+0x1d8>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <GPIO_setupPinDirection+0x1d4>
    1b16:	80 95       	com	r24
    1b18:	84 23       	and	r24, r20
    1b1a:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b20:	26 96       	adiw	r28, 0x06	; 6
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <GPIO_writePin+0x6>
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <GPIO_writePin+0x8>
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <GPIO_writePin+0xa>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	8a 83       	std	Y+2, r24	; 0x02
    1b42:	6b 83       	std	Y+3, r22	; 0x03
    1b44:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    1b46:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	88 30       	cpi	r24, 0x08	; 8
    1b4c:	18 f0       	brcs	.+6      	; 0x1b54 <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	e1 c0       	rjmp	.+450    	; 0x1d16 <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	84 30       	cpi	r24, 0x04	; 4
    1b58:	18 f0       	brcs	.+6      	; 0x1b60 <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	db c0       	rjmp	.+438    	; 0x1d16 <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	31 f0       	breq	.+12     	; 0x1b72 <GPIO_writePin+0x40>
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	88 23       	and	r24, r24
    1b6a:	19 f0       	breq	.+6      	; 0x1b72 <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1b6c:	83 e0       	ldi	r24, 0x03	; 3
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	d2 c0       	rjmp	.+420    	; 0x1d16 <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3e 83       	std	Y+6, r19	; 0x06
    1b7a:	2d 83       	std	Y+5, r18	; 0x05
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	91 05       	cpc	r25, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <GPIO_writePin+0x56>
    1b86:	43 c0       	rjmp	.+134    	; 0x1c0e <GPIO_writePin+0xdc>
    1b88:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <GPIO_writePin+0x6a>
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	71 f0       	breq	.+28     	; 0x1bb6 <GPIO_writePin+0x84>
    1b9a:	bc c0       	rjmp	.+376    	; 0x1d14 <GPIO_writePin+0x1e2>
    1b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <GPIO_writePin+0x76>
    1ba6:	5f c0       	rjmp	.+190    	; 0x1c66 <GPIO_writePin+0x134>
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	83 30       	cpi	r24, 0x03	; 3
    1bae:	91 05       	cpc	r25, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <GPIO_writePin+0x82>
    1bb2:	85 c0       	rjmp	.+266    	; 0x1cbe <GPIO_writePin+0x18c>
    1bb4:	af c0       	rjmp	.+350    	; 0x1d14 <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    1bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	a1 f4       	brne	.+40     	; 0x1be4 <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    1bbc:	ab e3       	ldi	r26, 0x3B	; 59
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	eb e3       	ldi	r30, 0x3B	; 59
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 2e       	mov	r0, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <GPIO_writePin+0xa8>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <GPIO_writePin+0xa4>
    1bde:	84 2b       	or	r24, r20
    1be0:	8c 93       	st	X, r24
    1be2:	98 c0       	rjmp	.+304    	; 0x1d14 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    1be4:	ab e3       	ldi	r26, 0x3B	; 59
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	eb e3       	ldi	r30, 0x3B	; 59
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <GPIO_writePin+0xd0>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <GPIO_writePin+0xcc>
    1c06:	80 95       	com	r24
    1c08:	84 23       	and	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	83 c0       	rjmp	.+262    	; 0x1d14 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	a1 f4       	brne	.+40     	; 0x1c3c <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    1c14:	a8 e3       	ldi	r26, 0x38	; 56
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e8 e3       	ldi	r30, 0x38	; 56
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <GPIO_writePin+0x100>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <GPIO_writePin+0xfc>
    1c36:	84 2b       	or	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	6c c0       	rjmp	.+216    	; 0x1d14 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    1c3c:	a8 e3       	ldi	r26, 0x38	; 56
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e8 e3       	ldi	r30, 0x38	; 56
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <GPIO_writePin+0x128>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <GPIO_writePin+0x124>
    1c5e:	80 95       	com	r24
    1c60:	84 23       	and	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	57 c0       	rjmp	.+174    	; 0x1d14 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	a1 f4       	brne	.+40     	; 0x1c94 <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    1c6c:	a5 e3       	ldi	r26, 0x35	; 53
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e5 e3       	ldi	r30, 0x35	; 53
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <GPIO_writePin+0x158>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <GPIO_writePin+0x154>
    1c8e:	84 2b       	or	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	40 c0       	rjmp	.+128    	; 0x1d14 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    1c94:	a5 e3       	ldi	r26, 0x35	; 53
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e5 e3       	ldi	r30, 0x35	; 53
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <GPIO_writePin+0x180>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <GPIO_writePin+0x17c>
    1cb6:	80 95       	com	r24
    1cb8:	84 23       	and	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	2b c0       	rjmp	.+86     	; 0x1d14 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    1cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	a1 f4       	brne	.+40     	; 0x1cec <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    1cc4:	a2 e3       	ldi	r26, 0x32	; 50
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e2 e3       	ldi	r30, 0x32	; 50
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	48 2f       	mov	r20, r24
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	02 2e       	mov	r0, r18
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <GPIO_writePin+0x1b0>
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	0a 94       	dec	r0
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <GPIO_writePin+0x1ac>
    1ce6:	84 2b       	or	r24, r20
    1ce8:	8c 93       	st	X, r24
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    1cec:	a2 e3       	ldi	r26, 0x32	; 50
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e2 e3       	ldi	r30, 0x32	; 50
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	48 2f       	mov	r20, r24
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 2e       	mov	r0, r18
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <GPIO_writePin+0x1d8>
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	0a 94       	dec	r0
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <GPIO_writePin+0x1d4>
    1d0e:	80 95       	com	r24
    1d10:	84 23       	and	r24, r20
    1d12:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1d14:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d18:	26 96       	adiw	r28, 0x06	; 6
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <GPIO_togglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <GPIO_togglePin+0x6>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <GPIO_togglePin+0x8>
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	8a 83       	std	Y+2, r24	; 0x02
    1d3a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    1d3c:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	88 30       	cpi	r24, 0x08	; 8
    1d42:	18 f0       	brcs	.+6      	; 0x1d4a <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	75 c0       	rjmp	.+234    	; 0x1e34 <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	84 30       	cpi	r24, 0x04	; 4
    1d4e:	18 f0       	brcs	.+6      	; 0x1d56 <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	6f c0       	rjmp	.+222    	; 0x1e34 <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	3d 83       	std	Y+5, r19	; 0x05
    1d5e:	2c 83       	std	Y+4, r18	; 0x04
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	91 05       	cpc	r25, r1
    1d68:	49 f1       	breq	.+82     	; 0x1dbc <GPIO_togglePin+0x92>
    1d6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <GPIO_togglePin+0x54>
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	9d 81       	ldd	r25, Y+5	; 0x05
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	61 f0       	breq	.+24     	; 0x1d94 <GPIO_togglePin+0x6a>
    1d7c:	5a c0       	rjmp	.+180    	; 0x1e32 <GPIO_togglePin+0x108>
    1d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d80:	3d 81       	ldd	r19, Y+5	; 0x05
    1d82:	22 30       	cpi	r18, 0x02	; 2
    1d84:	31 05       	cpc	r19, r1
    1d86:	71 f1       	breq	.+92     	; 0x1de4 <GPIO_togglePin+0xba>
    1d88:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8c:	83 30       	cpi	r24, 0x03	; 3
    1d8e:	91 05       	cpc	r25, r1
    1d90:	e9 f1       	breq	.+122    	; 0x1e0c <GPIO_togglePin+0xe2>
    1d92:	4f c0       	rjmp	.+158    	; 0x1e32 <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    1d94:	ab e3       	ldi	r26, 0x3B	; 59
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	eb e3       	ldi	r30, 0x3B	; 59
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 2e       	mov	r0, r18
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <GPIO_togglePin+0x88>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <GPIO_togglePin+0x84>
    1db6:	84 27       	eor	r24, r20
    1db8:	8c 93       	st	X, r24
    1dba:	3b c0       	rjmp	.+118    	; 0x1e32 <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    1dbc:	a8 e3       	ldi	r26, 0x38	; 56
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e8 e3       	ldi	r30, 0x38	; 56
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	48 2f       	mov	r20, r24
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	02 2e       	mov	r0, r18
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <GPIO_togglePin+0xb0>
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	0a 94       	dec	r0
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <GPIO_togglePin+0xac>
    1dde:	84 27       	eor	r24, r20
    1de0:	8c 93       	st	X, r24
    1de2:	27 c0       	rjmp	.+78     	; 0x1e32 <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    1de4:	a5 e3       	ldi	r26, 0x35	; 53
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e5 e3       	ldi	r30, 0x35	; 53
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <GPIO_togglePin+0xd8>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <GPIO_togglePin+0xd4>
    1e06:	84 27       	eor	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	13 c0       	rjmp	.+38     	; 0x1e32 <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    1e0c:	a2 e3       	ldi	r26, 0x32	; 50
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e2 e3       	ldi	r30, 0x32	; 50
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <GPIO_togglePin+0x100>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <GPIO_togglePin+0xfc>
    1e2e:	84 27       	eor	r24, r20
    1e30:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1e32:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	27 97       	sbiw	r28, 0x07	; 7
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    1e5e:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1e60:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	88 30       	cpi	r24, 0x08	; 8
    1e66:	28 f0       	brcs	.+10     	; 0x1e72 <GPIO_readPin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    1e6c:	29 81       	ldd	r18, Y+1	; 0x01
    1e6e:	2f 83       	std	Y+7, r18	; 0x07
    1e70:	8b c0       	rjmp	.+278    	; 0x1f88 <GPIO_readPin+0x142>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	84 30       	cpi	r24, 0x04	; 4
    1e76:	28 f0       	brcs	.+10     	; 0x1e82 <GPIO_readPin+0x3c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    1e7c:	39 81       	ldd	r19, Y+1	; 0x01
    1e7e:	3f 83       	std	Y+7, r19	; 0x07
    1e80:	83 c0       	rjmp	.+262    	; 0x1f88 <GPIO_readPin+0x142>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	48 2f       	mov	r20, r24
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	5e 83       	std	Y+6, r21	; 0x06
    1e8a:	4d 83       	std	Y+5, r20	; 0x05
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	79 f1       	breq	.+94     	; 0x1ef4 <GPIO_readPin+0xae>
    1e96:	2d 81       	ldd	r18, Y+5	; 0x05
    1e98:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	34 f4       	brge	.+12     	; 0x1eac <GPIO_readPin+0x66>
    1ea0:	4d 81       	ldd	r20, Y+5	; 0x05
    1ea2:	5e 81       	ldd	r21, Y+6	; 0x06
    1ea4:	41 15       	cp	r20, r1
    1ea6:	51 05       	cpc	r21, r1
    1ea8:	69 f0       	breq	.+26     	; 0x1ec4 <GPIO_readPin+0x7e>
    1eaa:	6b c0       	rjmp	.+214    	; 0x1f82 <GPIO_readPin+0x13c>
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	82 30       	cpi	r24, 0x02	; 2
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	b9 f1       	breq	.+110    	; 0x1f24 <GPIO_readPin+0xde>
    1eb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1eb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1eba:	23 30       	cpi	r18, 0x03	; 3
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <GPIO_readPin+0x7c>
    1ec0:	49 c0       	rjmp	.+146    	; 0x1f54 <GPIO_readPin+0x10e>
    1ec2:	5f c0       	rjmp	.+190    	; 0x1f82 <GPIO_readPin+0x13c>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
    1ec4:	e9 e3       	ldi	r30, 0x39	; 57
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a9 01       	movw	r20, r18
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <GPIO_readPin+0x96>
    1ed8:	55 95       	asr	r21
    1eda:	47 95       	ror	r20
    1edc:	8a 95       	dec	r24
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <GPIO_readPin+0x92>
    1ee0:	ca 01       	movw	r24, r20
    1ee2:	81 70       	andi	r24, 0x01	; 1
    1ee4:	90 70       	andi	r25, 0x00	; 0
    1ee6:	88 23       	and	r24, r24
    1ee8:	19 f0       	breq	.+6      	; 0x1ef0 <GPIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	8a 83       	std	Y+2, r24	; 0x02
    1eee:	49 c0       	rjmp	.+146    	; 0x1f82 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1ef0:	1a 82       	std	Y+2, r1	; 0x02
    1ef2:	47 c0       	rjmp	.+142    	; 0x1f82 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    1ef4:	e6 e3       	ldi	r30, 0x36	; 54
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a9 01       	movw	r20, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <GPIO_readPin+0xc6>
    1f08:	55 95       	asr	r21
    1f0a:	47 95       	ror	r20
    1f0c:	8a 95       	dec	r24
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <GPIO_readPin+0xc2>
    1f10:	ca 01       	movw	r24, r20
    1f12:	81 70       	andi	r24, 0x01	; 1
    1f14:	90 70       	andi	r25, 0x00	; 0
    1f16:	88 23       	and	r24, r24
    1f18:	19 f0       	breq	.+6      	; 0x1f20 <GPIO_readPin+0xda>
				pin_value = LOGIC_HIGH;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	8a 83       	std	Y+2, r24	; 0x02
    1f1e:	31 c0       	rjmp	.+98     	; 0x1f82 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1f20:	1a 82       	std	Y+2, r1	; 0x02
    1f22:	2f c0       	rjmp	.+94     	; 0x1f82 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    1f24:	e3 e3       	ldi	r30, 0x33	; 51
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a9 01       	movw	r20, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <GPIO_readPin+0xf6>
    1f38:	55 95       	asr	r21
    1f3a:	47 95       	ror	r20
    1f3c:	8a 95       	dec	r24
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <GPIO_readPin+0xf2>
    1f40:	ca 01       	movw	r24, r20
    1f42:	81 70       	andi	r24, 0x01	; 1
    1f44:	90 70       	andi	r25, 0x00	; 0
    1f46:	88 23       	and	r24, r24
    1f48:	19 f0       	breq	.+6      	; 0x1f50 <GPIO_readPin+0x10a>
				pin_value = LOGIC_HIGH;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	8a 83       	std	Y+2, r24	; 0x02
    1f4e:	19 c0       	rjmp	.+50     	; 0x1f82 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1f50:	1a 82       	std	Y+2, r1	; 0x02
    1f52:	17 c0       	rjmp	.+46     	; 0x1f82 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    1f54:	e0 e3       	ldi	r30, 0x30	; 48
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a9 01       	movw	r20, r18
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <GPIO_readPin+0x126>
    1f68:	55 95       	asr	r21
    1f6a:	47 95       	ror	r20
    1f6c:	8a 95       	dec	r24
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <GPIO_readPin+0x122>
    1f70:	ca 01       	movw	r24, r20
    1f72:	81 70       	andi	r24, 0x01	; 1
    1f74:	90 70       	andi	r25, 0x00	; 0
    1f76:	88 23       	and	r24, r24
    1f78:	19 f0       	breq	.+6      	; 0x1f80 <GPIO_readPin+0x13a>
				pin_value = LOGIC_HIGH;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	8a 83       	std	Y+2, r24	; 0x02
    1f7e:	01 c0       	rjmp	.+2      	; 0x1f82 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1f80:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1f82:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    1f84:	5a 81       	ldd	r21, Y+2	; 0x02
    1f86:	5f 83       	std	Y+7, r21	; 0x07
    1f88:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1f8a:	27 96       	adiw	r28, 0x07	; 7
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <GPIO_setupPortDirection+0x6>
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <GPIO_setupPortDirection+0x8>
    1fa4:	0f 92       	push	r0
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	8a 83       	std	Y+2, r24	; 0x02
    1fac:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1fae:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	84 30       	cpi	r24, 0x04	; 4
    1fb4:	18 f0       	brcs	.+6      	; 0x1fbc <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	3c c0       	rjmp	.+120    	; 0x2034 <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	88 23       	and	r24, r24
    1fc0:	31 f0       	breq	.+12     	; 0x1fce <GPIO_setupPortDirection+0x32>
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc6:	19 f0       	breq	.+6      	; 0x1fce <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1fc8:	83 e0       	ldi	r24, 0x03	; 3
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	33 c0       	rjmp	.+102    	; 0x2034 <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	3d 83       	std	Y+5, r19	; 0x05
    1fd6:	2c 83       	std	Y+4, r18	; 0x04
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	9d 81       	ldd	r25, Y+5	; 0x05
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	91 05       	cpc	r25, r1
    1fe0:	d1 f0       	breq	.+52     	; 0x2016 <GPIO_setupPortDirection+0x7a>
    1fe2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe6:	22 30       	cpi	r18, 0x02	; 2
    1fe8:	31 05       	cpc	r19, r1
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <GPIO_setupPortDirection+0x5a>
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	61 f0       	breq	.+24     	; 0x200c <GPIO_setupPortDirection+0x70>
    1ff4:	1e c0       	rjmp	.+60     	; 0x2032 <GPIO_setupPortDirection+0x96>
    1ff6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff8:	3d 81       	ldd	r19, Y+5	; 0x05
    1ffa:	22 30       	cpi	r18, 0x02	; 2
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	81 f0       	breq	.+32     	; 0x2020 <GPIO_setupPortDirection+0x84>
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	9d 81       	ldd	r25, Y+5	; 0x05
    2004:	83 30       	cpi	r24, 0x03	; 3
    2006:	91 05       	cpc	r25, r1
    2008:	81 f0       	breq	.+32     	; 0x202a <GPIO_setupPortDirection+0x8e>
    200a:	13 c0       	rjmp	.+38     	; 0x2032 <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    200c:	ea e3       	ldi	r30, 0x3A	; 58
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	80 83       	st	Z, r24
    2014:	0e c0       	rjmp	.+28     	; 0x2032 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    2016:	e7 e3       	ldi	r30, 0x37	; 55
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	80 83       	st	Z, r24
    201e:	09 c0       	rjmp	.+18     	; 0x2032 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    2020:	e4 e3       	ldi	r30, 0x34	; 52
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	80 83       	st	Z, r24
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    202a:	e1 e3       	ldi	r30, 0x31	; 49
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2032:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2034:	89 81       	ldd	r24, Y+1	; 0x01
}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <GPIO_writePort+0x6>
    204c:	00 d0       	rcall	.+0      	; 0x204e <GPIO_writePort+0x8>
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	8a 83       	std	Y+2, r24	; 0x02
    2056:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    2058:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	84 30       	cpi	r24, 0x04	; 4
    205e:	18 f0       	brcs	.+6      	; 0x2066 <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	33 c0       	rjmp	.+102    	; 0x20cc <GPIO_writePort+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	3d 83       	std	Y+5, r19	; 0x05
    206e:	2c 83       	std	Y+4, r18	; 0x04
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	81 30       	cpi	r24, 0x01	; 1
    2076:	91 05       	cpc	r25, r1
    2078:	d1 f0       	breq	.+52     	; 0x20ae <GPIO_writePort+0x68>
    207a:	2c 81       	ldd	r18, Y+4	; 0x04
    207c:	3d 81       	ldd	r19, Y+5	; 0x05
    207e:	22 30       	cpi	r18, 0x02	; 2
    2080:	31 05       	cpc	r19, r1
    2082:	2c f4       	brge	.+10     	; 0x208e <GPIO_writePort+0x48>
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	9d 81       	ldd	r25, Y+5	; 0x05
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	61 f0       	breq	.+24     	; 0x20a4 <GPIO_writePort+0x5e>
    208c:	1e c0       	rjmp	.+60     	; 0x20ca <GPIO_writePort+0x84>
    208e:	2c 81       	ldd	r18, Y+4	; 0x04
    2090:	3d 81       	ldd	r19, Y+5	; 0x05
    2092:	22 30       	cpi	r18, 0x02	; 2
    2094:	31 05       	cpc	r19, r1
    2096:	81 f0       	breq	.+32     	; 0x20b8 <GPIO_writePort+0x72>
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	83 30       	cpi	r24, 0x03	; 3
    209e:	91 05       	cpc	r25, r1
    20a0:	81 f0       	breq	.+32     	; 0x20c2 <GPIO_writePort+0x7c>
    20a2:	13 c0       	rjmp	.+38     	; 0x20ca <GPIO_writePort+0x84>
		case PORT_A:
			PORTA = value;
    20a4:	eb e3       	ldi	r30, 0x3B	; 59
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	80 83       	st	Z, r24
    20ac:	0e c0       	rjmp	.+28     	; 0x20ca <GPIO_writePort+0x84>
			break;
		case PORT_B:
			PORTB = value;
    20ae:	e8 e3       	ldi	r30, 0x38	; 56
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	80 83       	st	Z, r24
    20b6:	09 c0       	rjmp	.+18     	; 0x20ca <GPIO_writePort+0x84>
			break;
		case PORT_C:
			PORTC = value;
    20b8:	e5 e3       	ldi	r30, 0x35	; 53
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	80 83       	st	Z, r24
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <GPIO_writePort+0x84>
			break;
		case PORT_D:
			PORTD = value;
    20c2:	e2 e3       	ldi	r30, 0x32	; 50
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    20ca:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <GPIO_readPort+0x6>
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <GPIO_readPort+0x8>
    20e6:	0f 92       	push	r0
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    20ee:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    20f0:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	84 30       	cpi	r24, 0x04	; 4
    20f6:	18 f0       	brcs	.+6      	; 0x20fe <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	32 c0       	rjmp	.+100    	; 0x2162 <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	3d 83       	std	Y+5, r19	; 0x05
    2106:	2c 83       	std	Y+4, r18	; 0x04
    2108:	8c 81       	ldd	r24, Y+4	; 0x04
    210a:	9d 81       	ldd	r25, Y+5	; 0x05
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	91 05       	cpc	r25, r1
    2110:	d1 f0       	breq	.+52     	; 0x2146 <GPIO_readPort+0x68>
    2112:	2c 81       	ldd	r18, Y+4	; 0x04
    2114:	3d 81       	ldd	r19, Y+5	; 0x05
    2116:	22 30       	cpi	r18, 0x02	; 2
    2118:	31 05       	cpc	r19, r1
    211a:	2c f4       	brge	.+10     	; 0x2126 <GPIO_readPort+0x48>
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	9d 81       	ldd	r25, Y+5	; 0x05
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	61 f0       	breq	.+24     	; 0x213c <GPIO_readPort+0x5e>
    2124:	1e c0       	rjmp	.+60     	; 0x2162 <GPIO_readPort+0x84>
    2126:	2c 81       	ldd	r18, Y+4	; 0x04
    2128:	3d 81       	ldd	r19, Y+5	; 0x05
    212a:	22 30       	cpi	r18, 0x02	; 2
    212c:	31 05       	cpc	r19, r1
    212e:	81 f0       	breq	.+32     	; 0x2150 <GPIO_readPort+0x72>
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	83 30       	cpi	r24, 0x03	; 3
    2136:	91 05       	cpc	r25, r1
    2138:	81 f0       	breq	.+32     	; 0x215a <GPIO_readPort+0x7c>
    213a:	13 c0       	rjmp	.+38     	; 0x2162 <GPIO_readPort+0x84>
		case PORT_A:
			// Why value equals PINA?
			value = PINA;
    213c:	e9 e3       	ldi	r30, 0x39	; 57
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	0e c0       	rjmp	.+28     	; 0x2162 <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    2146:	e6 e3       	ldi	r30, 0x36	; 54
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	8a 83       	std	Y+2, r24	; 0x02
    214e:	09 c0       	rjmp	.+18     	; 0x2162 <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    2150:	e3 e3       	ldi	r30, 0x33	; 51
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8a 83       	std	Y+2, r24	; 0x02
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    215a:	e0 e3       	ldi	r30, 0x30	; 48
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <EXT_INTERRUPT_Init>:

#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>

// Initialize External Interrupt
void EXT_INTERRUPT_Init(void) {
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	 */

	// Checking if INT0 is enabled or disabled
	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		// Enabling the INT0 bit inside GICR
		SET_BIT(GICR, INT0);
    217c:	ab e5       	ldi	r26, 0x5B	; 91
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	eb e5       	ldi	r30, 0x5B	; 91
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	80 64       	ori	r24, 0x40	; 64
    2188:	8c 93       	st	X, r24

		// Setup Pin PD2 "INT0" to Input
		GPIO_setupPinDirection(PORT_D, PIN_2, PIN_INPUT);
    218a:	83 e0       	ldi	r24, 0x03	; 3
    218c:	62 e0       	ldi	r22, 0x02	; 2
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
			SET_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Falling_Edge)
			SET_BIT(MCUCR, ISC01);
			CLR_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC01);
    2194:	a5 e5       	ldi	r26, 0x55	; 85
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e5 e5       	ldi	r30, 0x55	; 85
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	82 60       	ori	r24, 0x02	; 2
    21a0:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC00);
    21a2:	a5 e5       	ldi	r26, 0x55	; 85
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e5 e5       	ldi	r30, 0x55	; 85
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	81 60       	ori	r24, 0x01	; 1
    21ae:	8c 93       	st	X, r24
		#elif (EXT_INTERRUPT_1_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC11);
			SET_BIT(MCUCR, ISC10);
		#endif
	#elif (EXT_INTERRUPT_INT1_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT1);
    21b0:	ab e5       	ldi	r26, 0x5B	; 91
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	eb e5       	ldi	r30, 0x5B	; 91
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8f 77       	andi	r24, 0x7F	; 127
    21bc:	8c 93       	st	X, r24
			CLR_BIT(MCUCSR, ISC2);
		#elif (EXT_INTERRUPT_2_MODE == EXT_INTERRUPT_INT2_Rising_Edge)
			SET_BIT(MCUCSR, ISC2);
		#endif
	#elif (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT2);
    21be:	ab e5       	ldi	r26, 0x5B	; 91
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	eb e5       	ldi	r30, 0x5B	; 91
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8f 7d       	andi	r24, 0xDF	; 223
    21ca:	8c 93       	st	X, r24

	/* Status Register – SREG Register Bits Description:
	 * Bit 7 – I: Global Interrupt Enable
	 */
	// Enabling the I-Bit
	SET_BIT(SREG, SREG_I_BIT);
    21cc:	af e5       	ldi	r26, 0x5F	; 95
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	ef e5       	ldi	r30, 0x5F	; 95
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	80 68       	ori	r24, 0x80	; 128
    21d8:	8c 93       	st	X, r24
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <EXT_INTERRUPT_DeInit>:

// Disable External Interrupt ISR
void EXT_INTERRUPT_DeInit(void) {
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62

	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT0);
    21e8:	ab e5       	ldi	r26, 0x5B	; 91
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	eb e5       	ldi	r30, 0x5B	; 91
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8f 7b       	andi	r24, 0xBF	; 191
    21f4:	8c 93       	st	X, r24

	#if (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT2);
	#endif

	CLR_BIT(SREG, SREG_I_BIT);
    21f6:	af e5       	ldi	r26, 0x5F	; 95
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	ef e5       	ldi	r30, 0x5F	; 95
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	8f 77       	andi	r24, 0x7F	; 127
    2202:	8c 93       	st	X, r24
}
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <EXT_INTERRUPT_SetCallBack>:

//The function that will be called in the EXT INT
void (*CallBackPtr) (void) = NULL;

// External Interrupt Call Back Function
void EXT_INTERRUPT_SetCallBack(void (*CopyFuncPtr) (void)) {
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <EXT_INTERRUPT_SetCallBack+0x6>
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = CopyFuncPtr;
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	90 93 69 01 	sts	0x0169, r25
    2220:	80 93 68 01 	sts	0x0168, r24
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <ADC_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
void ADC_Init(void) {
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
	 * 7:6, REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * 5, ADLAR   = 0 right adjusted
	 * 4:0, MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	// Sets REFS1:0 to '01'
	SET_BIT(ADMUX, REFS0);
    2236:	a7 e2       	ldi	r26, 0x27	; 39
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e7 e2       	ldi	r30, 0x27	; 39
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	80 64       	ori	r24, 0x40	; 64
    2242:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    2244:	a7 e2       	ldi	r26, 0x27	; 39
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e7 e2       	ldi	r30, 0x27	; 39
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	8f 77       	andi	r24, 0x7F	; 127
    2250:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, ADLAR);
    2252:	a7 e2       	ldi	r26, 0x27	; 39
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e7 e2       	ldi	r30, 0x27	; 39
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8f 7d       	andi	r24, 0xDF	; 223
    225e:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, MUX4);
    2260:	a7 e2       	ldi	r26, 0x27	; 39
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e7 e2       	ldi	r30, 0x27	; 39
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	8f 7e       	andi	r24, 0xEF	; 239
    226c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX3);
    226e:	a7 e2       	ldi	r26, 0x27	; 39
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e7 e2       	ldi	r30, 0x27	; 39
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	87 7f       	andi	r24, 0xF7	; 247
    227a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX2);
    227c:	a7 e2       	ldi	r26, 0x27	; 39
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e7 e2       	ldi	r30, 0x27	; 39
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	8b 7f       	andi	r24, 0xFB	; 251
    2288:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX1);
    228a:	a7 e2       	ldi	r26, 0x27	; 39
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e7 e2       	ldi	r30, 0x27	; 39
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	8d 7f       	andi	r24, 0xFD	; 253
    2296:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX0);
    2298:	a7 e2       	ldi	r26, 0x27	; 39
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e7 e2       	ldi	r30, 0x27	; 39
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8e 7f       	andi	r24, 0xFE	; 254
    22a4:	8c 93       	st	X, r24
	 * ADIE = 0 Disable ADC Interrupt
	 * ADATE = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	// Enables ADC
	SET_BIT(ADCSRA, ADEN);
    22a6:	a6 e2       	ldi	r26, 0x26	; 38
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e6 e2       	ldi	r30, 0x26	; 38
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	80 68       	ori	r24, 0x80	; 128
    22b2:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADIE);
    22b4:	a6 e2       	ldi	r26, 0x26	; 38
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e6 e2       	ldi	r30, 0x26	; 38
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	87 7f       	andi	r24, 0xF7	; 247
    22c0:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADATE);
    22c2:	a6 e2       	ldi	r26, 0x26	; 38
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e6 e2       	ldi	r30, 0x26	; 38
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8f 7d       	andi	r24, 0xDF	; 223
    22ce:	8c 93       	st	X, r24

	// Choose Prescaler: 128
	SET_BIT(ADCSRA, ADPS2);
    22d0:	a6 e2       	ldi	r26, 0x26	; 38
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e6 e2       	ldi	r30, 0x26	; 38
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	84 60       	ori	r24, 0x04	; 4
    22dc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    22de:	a6 e2       	ldi	r26, 0x26	; 38
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e6 e2       	ldi	r30, 0x26	; 38
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	82 60       	ori	r24, 0x02	; 2
    22ea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS0);
    22ec:	a6 e2       	ldi	r26, 0x26	; 38
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e6 e2       	ldi	r30, 0x26	; 38
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	81 60       	ori	r24, 0x01	; 1
    22f8:	8c 93       	st	X, r24

}
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <ADC_readChannel>:


// Reads the content written to the selected channel of the ADC
uint16 ADC_readChannel(uint8 channel_num) {
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	0f 92       	push	r0
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel Number in ADMUX Procedure

	// Clears first 5 bits to zero
	ADMUX &= 0xE0; // 0b1110 0000
    230c:	a7 e2       	ldi	r26, 0x27	; 39
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e7 e2       	ldi	r30, 0x27	; 39
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	80 7e       	andi	r24, 0xE0	; 224
    2318:	8c 93       	st	X, r24

	// Mask the Channel No. Input with max channel No.
	channel_num &= 0x07; // 0b0000 0111
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	87 70       	andi	r24, 0x07	; 7
    231e:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel no. into ADMUX Register
	ADMUX |= channel_num;
    2320:	a7 e2       	ldi	r26, 0x27	; 39
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e7 e2       	ldi	r30, 0x27	; 39
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	90 81       	ld	r25, Z
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	89 2b       	or	r24, r25
    232e:	8c 93       	st	X, r24

	// Starts ADC Conversion
	SET_BIT(ADCSRA, ADSC);
    2330:	a6 e2       	ldi	r26, 0x26	; 38
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e6 e2       	ldi	r30, 0x26	; 38
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 64       	ori	r24, 0x40	; 64
    233c:	8c 93       	st	X, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( BIT_IS_CLR(ADCSRA, ADIF) );
    233e:	e6 e2       	ldi	r30, 0x26	; 38
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	88 2f       	mov	r24, r24
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	80 71       	andi	r24, 0x10	; 16
    234a:	90 70       	andi	r25, 0x00	; 0
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	b9 f3       	breq	.-18     	; 0x233e <ADC_readChannel+0x3e>

	// sET FLAG BY 1 TO CLEAR
	SET_BIT(ADCSRA, ADIF);
    2350:	a6 e2       	ldi	r26, 0x26	; 38
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e6 e2       	ldi	r30, 0x26	; 38
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	80 61       	ori	r24, 0x10	; 16
    235c:	8c 93       	st	X, r24

	// Read Data
	return ADC;
    235e:	e4 e2       	ldi	r30, 0x24	; 36
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	91 81       	ldd	r25, Z+1	; 0x01
}
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <SEGMENT_Init+0x6>
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    237a:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	84 30       	cpi	r24, 0x04	; 4
    2380:	18 f0       	brcs	.+6      	; 0x2388 <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    2382:	82 e0       	ldi	r24, 0x02	; 2
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	15 c0       	rjmp	.+42     	; 0x23b2 <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	61 e0       	ldi	r22, 0x01	; 1
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	62 e0       	ldi	r22, 0x02	; 2
    23a0:	41 e0       	ldi	r20, 0x01	; 1
    23a2:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	63 e0       	ldi	r22, 0x03	; 3
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
    23b0:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <SEGMENT_DISPLAY+0x6>
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <SEGMENT_DISPLAY+0x8>
    23c6:	0f 92       	push	r0
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	8a 83       	std	Y+2, r24	; 0x02
    23ce:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    23d0:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	84 30       	cpi	r24, 0x04	; 4
    23d6:	18 f0       	brcs	.+6      	; 0x23de <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    23d8:	82 e0       	ldi	r24, 0x02	; 2
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	24 c1       	rjmp	.+584    	; 0x2626 <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	3d 83       	std	Y+5, r19	; 0x05
    23e6:	2c 83       	std	Y+4, r18	; 0x04
    23e8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ea:	9d 81       	ldd	r25, Y+5	; 0x05
    23ec:	84 30       	cpi	r24, 0x04	; 4
    23ee:	91 05       	cpc	r25, r1
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <SEGMENT_DISPLAY+0x36>
    23f2:	9b c0       	rjmp	.+310    	; 0x252a <SEGMENT_DISPLAY+0x16c>
    23f4:	2c 81       	ldd	r18, Y+4	; 0x04
    23f6:	3d 81       	ldd	r19, Y+5	; 0x05
    23f8:	25 30       	cpi	r18, 0x05	; 5
    23fa:	31 05       	cpc	r19, r1
    23fc:	ec f4       	brge	.+58     	; 0x2438 <SEGMENT_DISPLAY+0x7a>
    23fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2400:	9d 81       	ldd	r25, Y+5	; 0x05
    2402:	81 30       	cpi	r24, 0x01	; 1
    2404:	91 05       	cpc	r25, r1
    2406:	09 f4       	brne	.+2      	; 0x240a <SEGMENT_DISPLAY+0x4c>
    2408:	51 c0       	rjmp	.+162    	; 0x24ac <SEGMENT_DISPLAY+0xee>
    240a:	2c 81       	ldd	r18, Y+4	; 0x04
    240c:	3d 81       	ldd	r19, Y+5	; 0x05
    240e:	22 30       	cpi	r18, 0x02	; 2
    2410:	31 05       	cpc	r19, r1
    2412:	2c f4       	brge	.+10     	; 0x241e <SEGMENT_DISPLAY+0x60>
    2414:	8c 81       	ldd	r24, Y+4	; 0x04
    2416:	9d 81       	ldd	r25, Y+5	; 0x05
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	99 f1       	breq	.+102    	; 0x2482 <SEGMENT_DISPLAY+0xc4>
    241c:	03 c1       	rjmp	.+518    	; 0x2624 <SEGMENT_DISPLAY+0x266>
    241e:	2c 81       	ldd	r18, Y+4	; 0x04
    2420:	3d 81       	ldd	r19, Y+5	; 0x05
    2422:	22 30       	cpi	r18, 0x02	; 2
    2424:	31 05       	cpc	r19, r1
    2426:	09 f4       	brne	.+2      	; 0x242a <SEGMENT_DISPLAY+0x6c>
    2428:	56 c0       	rjmp	.+172    	; 0x24d6 <SEGMENT_DISPLAY+0x118>
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	83 30       	cpi	r24, 0x03	; 3
    2430:	91 05       	cpc	r25, r1
    2432:	09 f4       	brne	.+2      	; 0x2436 <SEGMENT_DISPLAY+0x78>
    2434:	65 c0       	rjmp	.+202    	; 0x2500 <SEGMENT_DISPLAY+0x142>
    2436:	f6 c0       	rjmp	.+492    	; 0x2624 <SEGMENT_DISPLAY+0x266>
    2438:	2c 81       	ldd	r18, Y+4	; 0x04
    243a:	3d 81       	ldd	r19, Y+5	; 0x05
    243c:	27 30       	cpi	r18, 0x07	; 7
    243e:	31 05       	cpc	r19, r1
    2440:	09 f4       	brne	.+2      	; 0x2444 <SEGMENT_DISPLAY+0x86>
    2442:	b2 c0       	rjmp	.+356    	; 0x25a8 <SEGMENT_DISPLAY+0x1ea>
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	9d 81       	ldd	r25, Y+5	; 0x05
    2448:	88 30       	cpi	r24, 0x08	; 8
    244a:	91 05       	cpc	r25, r1
    244c:	6c f4       	brge	.+26     	; 0x2468 <SEGMENT_DISPLAY+0xaa>
    244e:	2c 81       	ldd	r18, Y+4	; 0x04
    2450:	3d 81       	ldd	r19, Y+5	; 0x05
    2452:	25 30       	cpi	r18, 0x05	; 5
    2454:	31 05       	cpc	r19, r1
    2456:	09 f4       	brne	.+2      	; 0x245a <SEGMENT_DISPLAY+0x9c>
    2458:	7d c0       	rjmp	.+250    	; 0x2554 <SEGMENT_DISPLAY+0x196>
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	9d 81       	ldd	r25, Y+5	; 0x05
    245e:	86 30       	cpi	r24, 0x06	; 6
    2460:	91 05       	cpc	r25, r1
    2462:	09 f4       	brne	.+2      	; 0x2466 <SEGMENT_DISPLAY+0xa8>
    2464:	8c c0       	rjmp	.+280    	; 0x257e <SEGMENT_DISPLAY+0x1c0>
    2466:	de c0       	rjmp	.+444    	; 0x2624 <SEGMENT_DISPLAY+0x266>
    2468:	2c 81       	ldd	r18, Y+4	; 0x04
    246a:	3d 81       	ldd	r19, Y+5	; 0x05
    246c:	28 30       	cpi	r18, 0x08	; 8
    246e:	31 05       	cpc	r19, r1
    2470:	09 f4       	brne	.+2      	; 0x2474 <SEGMENT_DISPLAY+0xb6>
    2472:	af c0       	rjmp	.+350    	; 0x25d2 <SEGMENT_DISPLAY+0x214>
    2474:	8c 81       	ldd	r24, Y+4	; 0x04
    2476:	9d 81       	ldd	r25, Y+5	; 0x05
    2478:	89 30       	cpi	r24, 0x09	; 9
    247a:	91 05       	cpc	r25, r1
    247c:	09 f4       	brne	.+2      	; 0x2480 <SEGMENT_DISPLAY+0xc2>
    247e:	be c0       	rjmp	.+380    	; 0x25fc <SEGMENT_DISPLAY+0x23e>
    2480:	d1 c0       	rjmp	.+418    	; 0x2624 <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	61 e0       	ldi	r22, 0x01	; 1
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	62 e0       	ldi	r22, 0x02	; 2
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	63 e0       	ldi	r22, 0x03	; 3
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    24aa:	bc c0       	rjmp	.+376    	; 0x2624 <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	61 e0       	ldi	r22, 0x01	; 1
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	62 e0       	ldi	r22, 0x02	; 2
    24c4:	40 e0       	ldi	r20, 0x00	; 0
    24c6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	63 e0       	ldi	r22, 0x03	; 3
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    24d4:	a7 c0       	rjmp	.+334    	; 0x2624 <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	62 e0       	ldi	r22, 0x02	; 2
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	63 e0       	ldi	r22, 0x03	; 3
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    24fe:	92 c0       	rjmp	.+292    	; 0x2624 <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	62 e0       	ldi	r22, 0x02	; 2
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	63 e0       	ldi	r22, 0x03	; 3
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    2528:	7d c0       	rjmp	.+250    	; 0x2624 <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	62 e0       	ldi	r22, 0x02	; 2
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	63 e0       	ldi	r22, 0x03	; 3
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    2552:	68 c0       	rjmp	.+208    	; 0x2624 <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	61 e0       	ldi	r22, 0x01	; 1
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	62 e0       	ldi	r22, 0x02	; 2
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	63 e0       	ldi	r22, 0x03	; 3
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    257c:	53 c0       	rjmp	.+166    	; 0x2624 <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2588:	8a 81       	ldd	r24, Y+2	; 0x02
    258a:	61 e0       	ldi	r22, 0x01	; 1
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	62 e0       	ldi	r22, 0x02	; 2
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	63 e0       	ldi	r22, 0x03	; 3
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    25a6:	3e c0       	rjmp	.+124    	; 0x2624 <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	62 e0       	ldi	r22, 0x02	; 2
    25c0:	41 e0       	ldi	r20, 0x01	; 1
    25c2:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	63 e0       	ldi	r22, 0x03	; 3
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    25d0:	29 c0       	rjmp	.+82     	; 0x2624 <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	62 e0       	ldi	r22, 0x02	; 2
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	63 e0       	ldi	r22, 0x03	; 3
    25f4:	41 e0       	ldi	r20, 0x01	; 1
    25f6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    25fa:	14 c0       	rjmp	.+40     	; 0x2624 <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	62 e0       	ldi	r22, 0x02	; 2
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	63 e0       	ldi	r22, 0x03	; 3
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    2624:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2626:	89 81       	ldd	r24, Y+1	; 0x01
}
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <LM35_getTemperature>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
uint8 LM35_getTemperature(void) {
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	00 d0       	rcall	.+0      	; 0x263e <LM35_getTemperature+0x6>
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0;
    2642:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ADC_Value = 0;
    2644:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value = ADC_readChannel(LM35_CH_ID);
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	0e 94 80 11 	call	0x2300	; 0x2300 <ADC_readChannel>
    264c:	89 83       	std	Y+1, r24	; 0x01

	temperature = (uint8) ( ( (uint32)ADC_Value * LM35_MAX_TEMP * ADC_REFERENCE_VOLT_VALUE) / (ADC_MAX_VALUE * LM35_MAX_VOLT) );
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a0 e0       	ldi	r26, 0x00	; 0
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	2e ee       	ldi	r18, 0xEE	; 238
    265a:	32 e0       	ldi	r19, 0x02	; 2
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__mulsi3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 ed       	ldi	r19, 0xD0	; 208
    2680:	4f eb       	ldi	r20, 0xBF	; 191
    2682:	54 e4       	ldi	r21, 0x44	; 68
    2684:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8a 83       	std	Y+2, r24	; 0x02

	return temperature;
    269a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <LED_Init+0x6>
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	8a 83       	std	Y+2, r24	; 0x02
    26b4:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
    26b6:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	88 30       	cpi	r24, 0x08	; 8
    26bc:	18 f0       	brcs	.+6      	; 0x26c4 <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	0c c0       	rjmp	.+24     	; 0x26dc <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	84 30       	cpi	r24, 0x04	; 4
    26c8:	18 f0       	brcs	.+6      	; 0x26d0 <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	06 c0       	rjmp	.+12     	; 0x26dc <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	6b 81       	ldd	r22, Y+3	; 0x03
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
    26da:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <LED_On+0x6>
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	8a 83       	std	Y+2, r24	; 0x02
    26f8:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    26fa:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	88 30       	cpi	r24, 0x08	; 8
    2700:	18 f0       	brcs	.+6      	; 0x2708 <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	89 83       	std	Y+1, r24	; 0x01
    2706:	0c c0       	rjmp	.+24     	; 0x2720 <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	84 30       	cpi	r24, 0x04	; 4
    270c:	18 f0       	brcs	.+6      	; 0x2714 <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    270e:	82 e0       	ldi	r24, 0x02	; 2
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	06 c0       	rjmp	.+12     	; 0x2720 <LED_On+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	6b 81       	ldd	r22, Y+3	; 0x03
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
			#endif
			LED_Driver_Checker = LED_OK;
    271e:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2720:	89 81       	ldd	r24, Y+1	; 0x01
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	00 d0       	rcall	.+0      	; 0x2734 <LED_Off+0x6>
    2734:	0f 92       	push	r0
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	8a 83       	std	Y+2, r24	; 0x02
    273c:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    273e:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	88 30       	cpi	r24, 0x08	; 8
    2744:	18 f0       	brcs	.+6      	; 0x274c <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	0c c0       	rjmp	.+24     	; 0x2764 <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	84 30       	cpi	r24, 0x04	; 4
    2750:	18 f0       	brcs	.+6      	; 0x2758 <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	06 c0       	rjmp	.+12     	; 0x2764 <LED_Off+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	6b 81       	ldd	r22, Y+3	; 0x03
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
			#endif
			LED_Driver_Checker = LED_OK;
    2762:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2764:	89 81       	ldd	r24, Y+1	; 0x01
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	00 d0       	rcall	.+0      	; 0x2778 <LED_Toggle+0x6>
    2778:	0f 92       	push	r0
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	8a 83       	std	Y+2, r24	; 0x02
    2780:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2782:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	88 30       	cpi	r24, 0x08	; 8
    2788:	18 f0       	brcs	.+6      	; 0x2790 <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	0b c0       	rjmp	.+22     	; 0x27a6 <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	84 30       	cpi	r24, 0x04	; 4
    2794:	18 f0       	brcs	.+6      	; 0x279c <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2796:	82 e0       	ldi	r24, 0x02	; 2
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	05 c0       	rjmp	.+10     	; 0x27a6 <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	6b 81       	ldd	r22, Y+3	; 0x03
    27a0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    27a4:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <LCD_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the LCD Module to start functionality
void LCD_Init(void) {
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	2e 97       	sbiw	r28, 0x0e	; 14
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	41 e0       	ldi	r20, 0x01	; 1
    27ce:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>

	// Initialize Enable Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	62 e0       	ldi	r22, 0x02	; 2
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a0 ea       	ldi	r26, 0xA0	; 160
    27e2:	b1 e4       	ldi	r27, 0x41	; 65
    27e4:	8b 87       	std	Y+11, r24	; 0x0b
    27e6:	9c 87       	std	Y+12, r25	; 0x0c
    27e8:	ad 87       	std	Y+13, r26	; 0x0d
    27ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	4a e7       	ldi	r20, 0x7A	; 122
    27fa:	53 e4       	ldi	r21, 0x43	; 67
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	8f 83       	std	Y+7, r24	; 0x07
    2806:	98 87       	std	Y+8, r25	; 0x08
    2808:	a9 87       	std	Y+9, r26	; 0x09
    280a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    280c:	6f 81       	ldd	r22, Y+7	; 0x07
    280e:	78 85       	ldd	r23, Y+8	; 0x08
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e8       	ldi	r20, 0x80	; 128
    281a:	5f e3       	ldi	r21, 0x3F	; 63
    281c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2820:	88 23       	and	r24, r24
    2822:	2c f4       	brge	.+10     	; 0x282e <LCD_Init+0x7a>
		__ticks = 1;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	8d 83       	std	Y+5, r24	; 0x05
    282c:	3f c0       	rjmp	.+126    	; 0x28ac <LCD_Init+0xf8>
	else if (__tmp > 65535)
    282e:	6f 81       	ldd	r22, Y+7	; 0x07
    2830:	78 85       	ldd	r23, Y+8	; 0x08
    2832:	89 85       	ldd	r24, Y+9	; 0x09
    2834:	9a 85       	ldd	r25, Y+10	; 0x0a
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	3f ef       	ldi	r19, 0xFF	; 255
    283a:	4f e7       	ldi	r20, 0x7F	; 127
    283c:	57 e4       	ldi	r21, 0x47	; 71
    283e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2842:	18 16       	cp	r1, r24
    2844:	4c f5       	brge	.+82     	; 0x2898 <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2846:	6b 85       	ldd	r22, Y+11	; 0x0b
    2848:	7c 85       	ldd	r23, Y+12	; 0x0c
    284a:	8d 85       	ldd	r24, Y+13	; 0x0d
    284c:	9e 85       	ldd	r25, Y+14	; 0x0e
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e2       	ldi	r20, 0x20	; 32
    2854:	51 e4       	ldi	r21, 0x41	; 65
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
    286e:	0f c0       	rjmp	.+30     	; 0x288e <LCD_Init+0xda>
    2870:	89 e1       	ldi	r24, 0x19	; 25
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9c 83       	std	Y+4, r25	; 0x04
    2876:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <LCD_Init+0xc8>
    2880:	9c 83       	std	Y+4, r25	; 0x04
    2882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	69 f7       	brne	.-38     	; 0x2870 <LCD_Init+0xbc>
    2896:	14 c0       	rjmp	.+40     	; 0x28c0 <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2898:	6f 81       	ldd	r22, Y+7	; 0x07
    289a:	78 85       	ldd	r23, Y+8	; 0x08
    289c:	89 85       	ldd	r24, Y+9	; 0x09
    289e:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9e 83       	std	Y+6, r25	; 0x06
    28aa:	8d 83       	std	Y+5, r24	; 0x05
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <LCD_Init+0x104>
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	// Initializing Sending Commands
	// Checks which BIT Mode, 4 or 8 line bit
	if (LCD_BIT_MODE == 4) {
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), PIN_OUTPUT);
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	63 e0       	ldi	r22, 0x03	; 3
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), PIN_OUTPUT);
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	64 e0       	ldi	r22, 0x04	; 4
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), PIN_OUTPUT);
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	65 e0       	ldi	r22, 0x05	; 5
    28d8:	41 e0       	ldi	r20, 0x01	; 1
    28da:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), PIN_OUTPUT);
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	66 e0       	ldi	r22, 0x06	; 6
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>

		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT1);
    28e8:	83 e3       	ldi	r24, 0x33	; 51
    28ea:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT2);
    28ee:	82 e3       	ldi	r24, 0x32	; 50
    28f0:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT);
    28f4:	88 e2       	ldi	r24, 0x28	; 40
    28f6:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_sendCommand>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}

	// Makes the cursor off
	LCD_sendCommand(LCD_CURSOR_OFF);
    28fa:	8c e0       	ldi	r24, 0x0C	; 12
    28fc:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_sendCommand>
	// Clears Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_sendCommand>
}
    2906:	2e 96       	adiw	r28, 0x0e	; 14
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <LCD_sendCommand>:


// Sends a command to the LCD
void LCD_sendCommand(uint8 command) {
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	c3 56       	subi	r28, 0x63	; 99
    2926:	d0 40       	sbci	r29, 0x00	; 0
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	fe 01       	movw	r30, r28
    2934:	ed 59       	subi	r30, 0x9D	; 157
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	61 e0       	ldi	r22, 0x01	; 1
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    2944:	fe 01       	movw	r30, r28
    2946:	e1 5a       	subi	r30, 0xA1	; 161
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a0 e8       	ldi	r26, 0x80	; 128
    2950:	bf e3       	ldi	r27, 0x3F	; 63
    2952:	80 83       	st	Z, r24
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	a2 83       	std	Z+2, r26	; 0x02
    2958:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295a:	8e 01       	movw	r16, r28
    295c:	05 5a       	subi	r16, 0xA5	; 165
    295e:	1f 4f       	sbci	r17, 0xFF	; 255
    2960:	fe 01       	movw	r30, r28
    2962:	e1 5a       	subi	r30, 0xA1	; 161
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	4a e7       	ldi	r20, 0x7A	; 122
    2974:	53 e4       	ldi	r21, 0x43	; 67
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	f8 01       	movw	r30, r16
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2988:	fe 01       	movw	r30, r28
    298a:	e5 5a       	subi	r30, 0xA5	; 165
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f e3       	ldi	r21, 0x3F	; 63
    299e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29a2:	88 23       	and	r24, r24
    29a4:	44 f4       	brge	.+16     	; 0x29b6 <LCD_sendCommand+0x9e>
		__ticks = 1;
    29a6:	fe 01       	movw	r30, r28
    29a8:	e7 5a       	subi	r30, 0xA7	; 167
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
    29b4:	64 c0       	rjmp	.+200    	; 0x2a7e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    29b6:	fe 01       	movw	r30, r28
    29b8:	e5 5a       	subi	r30, 0xA5	; 165
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	3f ef       	ldi	r19, 0xFF	; 255
    29c8:	4f e7       	ldi	r20, 0x7F	; 127
    29ca:	57 e4       	ldi	r21, 0x47	; 71
    29cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    29d0:	18 16       	cp	r1, r24
    29d2:	0c f0       	brlt	.+2      	; 0x29d6 <LCD_sendCommand+0xbe>
    29d4:	43 c0       	rjmp	.+134    	; 0x2a5c <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	fe 01       	movw	r30, r28
    29d8:	e1 5a       	subi	r30, 0xA1	; 161
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	51 e4       	ldi	r21, 0x41	; 65
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8e 01       	movw	r16, r28
    29f6:	07 5a       	subi	r16, 0xA7	; 167
    29f8:	1f 4f       	sbci	r17, 0xFF	; 255
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	f8 01       	movw	r30, r16
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	1f c0       	rjmp	.+62     	; 0x2a4c <LCD_sendCommand+0x134>
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e9 5a       	subi	r30, 0xA9	; 169
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	89 e1       	ldi	r24, 0x19	; 25
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	80 83       	st	Z, r24
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e9 5a       	subi	r30, 0xA9	; 169
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_sendCommand+0x10e>
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e9 5a       	subi	r30, 0xA9	; 169
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	de 01       	movw	r26, r28
    2a36:	a7 5a       	subi	r26, 0xA7	; 167
    2a38:	bf 4f       	sbci	r27, 0xFF	; 255
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e7 5a       	subi	r30, 0xA7	; 167
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	11 96       	adiw	r26, 0x01	; 1
    2a48:	9c 93       	st	X, r25
    2a4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e7 5a       	subi	r30, 0xA7	; 167
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	d1 f6       	brne	.-76     	; 0x2a0e <LCD_sendCommand+0xf6>
    2a5a:	27 c0       	rjmp	.+78     	; 0x2aaa <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5c:	8e 01       	movw	r16, r28
    2a5e:	07 5a       	subi	r16, 0xA7	; 167
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	fe 01       	movw	r30, r28
    2a64:	e5 5a       	subi	r30, 0xA5	; 165
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	f8 01       	movw	r30, r16
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	80 83       	st	Z, r24
    2a7e:	de 01       	movw	r26, r28
    2a80:	ab 5a       	subi	r26, 0xAB	; 171
    2a82:	bf 4f       	sbci	r27, 0xFF	; 255
    2a84:	fe 01       	movw	r30, r28
    2a86:	e7 5a       	subi	r30, 0xA7	; 167
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	8d 93       	st	X+, r24
    2a90:	9c 93       	st	X, r25
    2a92:	fe 01       	movw	r30, r28
    2a94:	eb 5a       	subi	r30, 0xAB	; 171
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <LCD_sendCommand+0x184>
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	eb 5a       	subi	r30, 0xAB	; 171
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	62 e0       	ldi	r22, 0x02	; 2
    2aae:	41 e0       	ldi	r20, 0x01	; 1
    2ab0:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ef 5a       	subi	r30, 0xAF	; 175
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e8       	ldi	r26, 0x80	; 128
    2ac0:	bf e3       	ldi	r27, 0x3F	; 63
    2ac2:	80 83       	st	Z, r24
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	a2 83       	std	Z+2, r26	; 0x02
    2ac8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aca:	8e 01       	movw	r16, r28
    2acc:	03 5b       	subi	r16, 0xB3	; 179
    2ace:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ef 5a       	subi	r30, 0xAF	; 175
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a e7       	ldi	r20, 0x7A	; 122
    2ae4:	53 e4       	ldi	r21, 0x43	; 67
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	f8 01       	movw	r30, r16
    2af0:	80 83       	st	Z, r24
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	a2 83       	std	Z+2, r26	; 0x02
    2af6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2af8:	fe 01       	movw	r30, r28
    2afa:	e3 5b       	subi	r30, 0xB3	; 179
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	44 f4       	brge	.+16     	; 0x2b26 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2b16:	fe 01       	movw	r30, r28
    2b18:	e5 5b       	subi	r30, 0xB5	; 181
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	64 c0       	rjmp	.+200    	; 0x2bee <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2b26:	fe 01       	movw	r30, r28
    2b28:	e3 5b       	subi	r30, 0xB3	; 179
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	3f ef       	ldi	r19, 0xFF	; 255
    2b38:	4f e7       	ldi	r20, 0x7F	; 127
    2b3a:	57 e4       	ldi	r21, 0x47	; 71
    2b3c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b40:	18 16       	cp	r1, r24
    2b42:	0c f0       	brlt	.+2      	; 0x2b46 <LCD_sendCommand+0x22e>
    2b44:	43 c0       	rjmp	.+134    	; 0x2bcc <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b46:	fe 01       	movw	r30, r28
    2b48:	ef 5a       	subi	r30, 0xAF	; 175
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	8e 01       	movw	r16, r28
    2b66:	05 5b       	subi	r16, 0xB5	; 181
    2b68:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	f8 01       	movw	r30, r16
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	1f c0       	rjmp	.+62     	; 0x2bbc <LCD_sendCommand+0x2a4>
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e7 5b       	subi	r30, 0xB7	; 183
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	89 e1       	ldi	r24, 0x19	; 25
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	80 83       	st	Z, r24
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e7 5b       	subi	r30, 0xB7	; 183
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <LCD_sendCommand+0x27e>
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e7 5b       	subi	r30, 0xB7	; 183
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	de 01       	movw	r26, r28
    2ba6:	a5 5b       	subi	r26, 0xB5	; 181
    2ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    2baa:	fe 01       	movw	r30, r28
    2bac:	e5 5b       	subi	r30, 0xB5	; 181
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	11 96       	adiw	r26, 0x01	; 1
    2bb8:	9c 93       	st	X, r25
    2bba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e5 5b       	subi	r30, 0xB5	; 181
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	d1 f6       	brne	.-76     	; 0x2b7e <LCD_sendCommand+0x266>
    2bca:	27 c0       	rjmp	.+78     	; 0x2c1a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bcc:	8e 01       	movw	r16, r28
    2bce:	05 5b       	subi	r16, 0xB5	; 181
    2bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e3 5b       	subi	r30, 0xB3	; 179
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	60 81       	ld	r22, Z
    2bda:	71 81       	ldd	r23, Z+1	; 0x01
    2bdc:	82 81       	ldd	r24, Z+2	; 0x02
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	f8 01       	movw	r30, r16
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
    2bee:	de 01       	movw	r26, r28
    2bf0:	a9 5b       	subi	r26, 0xB9	; 185
    2bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e5 5b       	subi	r30, 0xB5	; 181
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	8d 93       	st	X+, r24
    2c00:	9c 93       	st	X, r25
    2c02:	fe 01       	movw	r30, r28
    2c04:	e9 5b       	subi	r30, 0xB9	; 185
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	80 81       	ld	r24, Z
    2c0a:	91 81       	ldd	r25, Z+1	; 0x01
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <LCD_sendCommand+0x2f4>
    2c10:	fe 01       	movw	r30, r28
    2c12:	e9 5b       	subi	r30, 0xB9	; 185
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the command in the assigned PORT to be sent to the LCD
	// uint8 BIT_MODE;
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 4 ));
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ed 59       	subi	r30, 0x9D	; 157
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	82 95       	swap	r24
    2c24:	8f 70       	andi	r24, 0x0F	; 15
    2c26:	98 2f       	mov	r25, r24
    2c28:	91 70       	andi	r25, 0x01	; 1
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	63 e0       	ldi	r22, 0x03	; 3
    2c2e:	49 2f       	mov	r20, r25
    2c30:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 5 ));
    2c34:	fe 01       	movw	r30, r28
    2c36:	ed 59       	subi	r30, 0x9D	; 157
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	82 95       	swap	r24
    2c3e:	86 95       	lsr	r24
    2c40:	87 70       	andi	r24, 0x07	; 7
    2c42:	98 2f       	mov	r25, r24
    2c44:	91 70       	andi	r25, 0x01	; 1
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	64 e0       	ldi	r22, 0x04	; 4
    2c4a:	49 2f       	mov	r20, r25
    2c4c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 6 ));
    2c50:	fe 01       	movw	r30, r28
    2c52:	ed 59       	subi	r30, 0x9D	; 157
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	82 95       	swap	r24
    2c5a:	86 95       	lsr	r24
    2c5c:	86 95       	lsr	r24
    2c5e:	83 70       	andi	r24, 0x03	; 3
    2c60:	98 2f       	mov	r25, r24
    2c62:	91 70       	andi	r25, 0x01	; 1
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	65 e0       	ldi	r22, 0x05	; 5
    2c68:	49 2f       	mov	r20, r25
    2c6a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 7 ));
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ed 59       	subi	r30, 0x9D	; 157
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	98 2f       	mov	r25, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	99 27       	eor	r25, r25
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	66 e0       	ldi	r22, 0x06	; 6
    2c82:	49 2f       	mov	r20, r25
    2c84:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    2c88:	fe 01       	movw	r30, r28
    2c8a:	ed 5b       	subi	r30, 0xBD	; 189
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	a0 e8       	ldi	r26, 0x80	; 128
    2c94:	bf e3       	ldi	r27, 0x3F	; 63
    2c96:	80 83       	st	Z, r24
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	a2 83       	std	Z+2, r26	; 0x02
    2c9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9e:	8e 01       	movw	r16, r28
    2ca0:	01 5c       	subi	r16, 0xC1	; 193
    2ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	ed 5b       	subi	r30, 0xBD	; 189
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	60 81       	ld	r22, Z
    2cac:	71 81       	ldd	r23, Z+1	; 0x01
    2cae:	82 81       	ldd	r24, Z+2	; 0x02
    2cb0:	93 81       	ldd	r25, Z+3	; 0x03
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a e7       	ldi	r20, 0x7A	; 122
    2cb8:	53 e4       	ldi	r21, 0x43	; 67
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	f8 01       	movw	r30, r16
    2cc4:	80 83       	st	Z, r24
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	a2 83       	std	Z+2, r26	; 0x02
    2cca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ff 96       	adiw	r30, 0x3f	; 63
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e8       	ldi	r20, 0x80	; 128
    2cde:	5f e3       	ldi	r21, 0x3F	; 63
    2ce0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ce4:	88 23       	and	r24, r24
    2ce6:	2c f4       	brge	.+10     	; 0x2cf2 <LCD_sendCommand+0x3da>
		__ticks = 1;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	9e af       	std	Y+62, r25	; 0x3e
    2cee:	8d af       	std	Y+61, r24	; 0x3d
    2cf0:	46 c0       	rjmp	.+140    	; 0x2d7e <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ff 96       	adiw	r30, 0x3f	; 63
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	3f ef       	ldi	r19, 0xFF	; 255
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	57 e4       	ldi	r21, 0x47	; 71
    2d06:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	64 f5       	brge	.+88     	; 0x2d66 <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ed 5b       	subi	r30, 0xBD	; 189
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	60 81       	ld	r22, Z
    2d16:	71 81       	ldd	r23, Z+1	; 0x01
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	93 81       	ldd	r25, Z+3	; 0x03
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9e af       	std	Y+62, r25	; 0x3e
    2d3a:	8d af       	std	Y+61, r24	; 0x3d
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <LCD_sendCommand+0x444>
    2d3e:	89 e1       	ldi	r24, 0x19	; 25
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9c af       	std	Y+60, r25	; 0x3c
    2d44:	8b af       	std	Y+59, r24	; 0x3b
    2d46:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d48:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <LCD_sendCommand+0x432>
    2d4e:	9c af       	std	Y+60, r25	; 0x3c
    2d50:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d54:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9e af       	std	Y+62, r25	; 0x3e
    2d5a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <LCD_sendCommand+0x426>
    2d64:	16 c0       	rjmp	.+44     	; 0x2d92 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	fe 01       	movw	r30, r28
    2d68:	ff 96       	adiw	r30, 0x3f	; 63
    2d6a:	60 81       	ld	r22, Z
    2d6c:	71 81       	ldd	r23, Z+1	; 0x01
    2d6e:	82 81       	ldd	r24, Z+2	; 0x02
    2d70:	93 81       	ldd	r25, Z+3	; 0x03
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9e af       	std	Y+62, r25	; 0x3e
    2d7c:	8d af       	std	Y+61, r24	; 0x3d
    2d7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d80:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d82:	9a af       	std	Y+58, r25	; 0x3a
    2d84:	89 af       	std	Y+57, r24	; 0x39
    2d86:	89 ad       	ldd	r24, Y+57	; 0x39
    2d88:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <LCD_sendCommand+0x472>
    2d8e:	9a af       	std	Y+58, r25	; 0x3a
    2d90:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	62 e0       	ldi	r22, 0x02	; 2
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a0 e8       	ldi	r26, 0x80	; 128
    2da2:	bf e3       	ldi	r27, 0x3F	; 63
    2da4:	8d ab       	std	Y+53, r24	; 0x35
    2da6:	9e ab       	std	Y+54, r25	; 0x36
    2da8:	af ab       	std	Y+55, r26	; 0x37
    2daa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	6d a9       	ldd	r22, Y+53	; 0x35
    2dae:	7e a9       	ldd	r23, Y+54	; 0x36
    2db0:	8f a9       	ldd	r24, Y+55	; 0x37
    2db2:	98 ad       	ldd	r25, Y+56	; 0x38
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a e7       	ldi	r20, 0x7A	; 122
    2dba:	53 e4       	ldi	r21, 0x43	; 67
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	89 ab       	std	Y+49, r24	; 0x31
    2dc6:	9a ab       	std	Y+50, r25	; 0x32
    2dc8:	ab ab       	std	Y+51, r26	; 0x33
    2dca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dcc:	69 a9       	ldd	r22, Y+49	; 0x31
    2dce:	7a a9       	ldd	r23, Y+50	; 0x32
    2dd0:	8b a9       	ldd	r24, Y+51	; 0x33
    2dd2:	9c a9       	ldd	r25, Y+52	; 0x34
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e8       	ldi	r20, 0x80	; 128
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2de0:	88 23       	and	r24, r24
    2de2:	2c f4       	brge	.+10     	; 0x2dee <LCD_sendCommand+0x4d6>
		__ticks = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	98 ab       	std	Y+48, r25	; 0x30
    2dea:	8f a7       	std	Y+47, r24	; 0x2f
    2dec:	3f c0       	rjmp	.+126    	; 0x2e6c <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    2dee:	69 a9       	ldd	r22, Y+49	; 0x31
    2df0:	7a a9       	ldd	r23, Y+50	; 0x32
    2df2:	8b a9       	ldd	r24, Y+51	; 0x33
    2df4:	9c a9       	ldd	r25, Y+52	; 0x34
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	3f ef       	ldi	r19, 0xFF	; 255
    2dfa:	4f e7       	ldi	r20, 0x7F	; 127
    2dfc:	57 e4       	ldi	r21, 0x47	; 71
    2dfe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	4c f5       	brge	.+82     	; 0x2e58 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	6d a9       	ldd	r22, Y+53	; 0x35
    2e08:	7e a9       	ldd	r23, Y+54	; 0x36
    2e0a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e0c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	98 ab       	std	Y+48, r25	; 0x30
    2e2c:	8f a7       	std	Y+47, r24	; 0x2f
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <LCD_sendCommand+0x536>
    2e30:	89 e1       	ldi	r24, 0x19	; 25
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9e a7       	std	Y+46, r25	; 0x2e
    2e36:	8d a7       	std	Y+45, r24	; 0x2d
    2e38:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <LCD_sendCommand+0x524>
    2e40:	9e a7       	std	Y+46, r25	; 0x2e
    2e42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e46:	98 a9       	ldd	r25, Y+48	; 0x30
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	98 ab       	std	Y+48, r25	; 0x30
    2e4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e50:	98 a9       	ldd	r25, Y+48	; 0x30
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <LCD_sendCommand+0x518>
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	69 a9       	ldd	r22, Y+49	; 0x31
    2e5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	98 ab       	std	Y+48, r25	; 0x30
    2e6a:	8f a7       	std	Y+47, r24	; 0x2f
    2e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e70:	9c a7       	std	Y+44, r25	; 0x2c
    2e72:	8b a7       	std	Y+43, r24	; 0x2b
    2e74:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e76:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <LCD_sendCommand+0x560>
    2e7c:	9c a7       	std	Y+44, r25	; 0x2c
    2e7e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	62 e0       	ldi	r22, 0x02	; 2
    2e84:	41 e0       	ldi	r20, 0x01	; 1
    2e86:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	a0 e8       	ldi	r26, 0x80	; 128
    2e90:	bf e3       	ldi	r27, 0x3F	; 63
    2e92:	8f a3       	std	Y+39, r24	; 0x27
    2e94:	98 a7       	std	Y+40, r25	; 0x28
    2e96:	a9 a7       	std	Y+41, r26	; 0x29
    2e98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a e7       	ldi	r20, 0x7A	; 122
    2ea8:	53 e4       	ldi	r21, 0x43	; 67
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8b a3       	std	Y+35, r24	; 0x23
    2eb4:	9c a3       	std	Y+36, r25	; 0x24
    2eb6:	ad a3       	std	Y+37, r26	; 0x25
    2eb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eba:	6b a1       	ldd	r22, Y+35	; 0x23
    2ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <LCD_sendCommand+0x5c4>
		__ticks = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9a a3       	std	Y+34, r25	; 0x22
    2ed8:	89 a3       	std	Y+33, r24	; 0x21
    2eda:	3f c0       	rjmp	.+126    	; 0x2f5a <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    2edc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ede:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	4c f5       	brge	.+82     	; 0x2f46 <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ef8:	89 a5       	ldd	r24, Y+41	; 0x29
    2efa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9a a3       	std	Y+34, r25	; 0x22
    2f1a:	89 a3       	std	Y+33, r24	; 0x21
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <LCD_sendCommand+0x624>
    2f1e:	89 e1       	ldi	r24, 0x19	; 25
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	98 a3       	std	Y+32, r25	; 0x20
    2f24:	8f 8f       	std	Y+31, r24	; 0x1f
    2f26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f28:	98 a1       	ldd	r25, Y+32	; 0x20
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_sendCommand+0x612>
    2f2e:	98 a3       	std	Y+32, r25	; 0x20
    2f30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	89 a1       	ldd	r24, Y+33	; 0x21
    2f34:	9a a1       	ldd	r25, Y+34	; 0x22
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9a a3       	std	Y+34, r25	; 0x22
    2f3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <LCD_sendCommand+0x606>
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	6b a1       	ldd	r22, Y+35	; 0x23
    2f48:	7c a1       	ldd	r23, Y+36	; 0x24
    2f4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	9a a3       	std	Y+34, r25	; 0x22
    2f58:	89 a3       	std	Y+33, r24	; 0x21
    2f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f5e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f60:	8d 8f       	std	Y+29, r24	; 0x1d
    2f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <LCD_sendCommand+0x64e>
    2f6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f6c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 0 ));
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ed 59       	subi	r30, 0x9D	; 157
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	98 2f       	mov	r25, r24
    2f78:	91 70       	andi	r25, 0x01	; 1
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	63 e0       	ldi	r22, 0x03	; 3
    2f7e:	49 2f       	mov	r20, r25
    2f80:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 1 ));
    2f84:	fe 01       	movw	r30, r28
    2f86:	ed 59       	subi	r30, 0x9D	; 157
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	86 95       	lsr	r24
    2f8e:	98 2f       	mov	r25, r24
    2f90:	91 70       	andi	r25, 0x01	; 1
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	64 e0       	ldi	r22, 0x04	; 4
    2f96:	49 2f       	mov	r20, r25
    2f98:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 2 ));
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	ed 59       	subi	r30, 0x9D	; 157
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	80 81       	ld	r24, Z
    2fa4:	86 95       	lsr	r24
    2fa6:	86 95       	lsr	r24
    2fa8:	98 2f       	mov	r25, r24
    2faa:	91 70       	andi	r25, 0x01	; 1
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	65 e0       	ldi	r22, 0x05	; 5
    2fb0:	49 2f       	mov	r20, r25
    2fb2:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 3 ));
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ed 59       	subi	r30, 0x9D	; 157
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 81       	ld	r24, Z
    2fbe:	86 95       	lsr	r24
    2fc0:	86 95       	lsr	r24
    2fc2:	86 95       	lsr	r24
    2fc4:	98 2f       	mov	r25, r24
    2fc6:	91 70       	andi	r25, 0x01	; 1
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	66 e0       	ldi	r22, 0x06	; 6
    2fcc:	49 2f       	mov	r20, r25
    2fce:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	a0 e8       	ldi	r26, 0x80	; 128
    2fd8:	bf e3       	ldi	r27, 0x3F	; 63
    2fda:	89 8f       	std	Y+25, r24	; 0x19
    2fdc:	9a 8f       	std	Y+26, r25	; 0x1a
    2fde:	ab 8f       	std	Y+27, r26	; 0x1b
    2fe0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	4a e7       	ldi	r20, 0x7A	; 122
    2ff0:	53 e4       	ldi	r21, 0x43	; 67
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	8d 8b       	std	Y+21, r24	; 0x15
    2ffc:	9e 8b       	std	Y+22, r25	; 0x16
    2ffe:	af 8b       	std	Y+23, r26	; 0x17
    3000:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3002:	6d 89       	ldd	r22, Y+21	; 0x15
    3004:	7e 89       	ldd	r23, Y+22	; 0x16
    3006:	8f 89       	ldd	r24, Y+23	; 0x17
    3008:	98 8d       	ldd	r25, Y+24	; 0x18
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e8       	ldi	r20, 0x80	; 128
    3010:	5f e3       	ldi	r21, 0x3F	; 63
    3012:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3016:	88 23       	and	r24, r24
    3018:	2c f4       	brge	.+10     	; 0x3024 <LCD_sendCommand+0x70c>
		__ticks = 1;
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	9c 8b       	std	Y+20, r25	; 0x14
    3020:	8b 8b       	std	Y+19, r24	; 0x13
    3022:	3f c0       	rjmp	.+126    	; 0x30a2 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    3024:	6d 89       	ldd	r22, Y+21	; 0x15
    3026:	7e 89       	ldd	r23, Y+22	; 0x16
    3028:	8f 89       	ldd	r24, Y+23	; 0x17
    302a:	98 8d       	ldd	r25, Y+24	; 0x18
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	3f ef       	ldi	r19, 0xFF	; 255
    3030:	4f e7       	ldi	r20, 0x7F	; 127
    3032:	57 e4       	ldi	r21, 0x47	; 71
    3034:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3038:	18 16       	cp	r1, r24
    303a:	4c f5       	brge	.+82     	; 0x308e <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303c:	69 8d       	ldd	r22, Y+25	; 0x19
    303e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3040:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3042:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e2       	ldi	r20, 0x20	; 32
    304a:	51 e4       	ldi	r21, 0x41	; 65
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	9c 8b       	std	Y+20, r25	; 0x14
    3062:	8b 8b       	std	Y+19, r24	; 0x13
    3064:	0f c0       	rjmp	.+30     	; 0x3084 <LCD_sendCommand+0x76c>
    3066:	89 e1       	ldi	r24, 0x19	; 25
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	9a 8b       	std	Y+18, r25	; 0x12
    306c:	89 8b       	std	Y+17, r24	; 0x11
    306e:	89 89       	ldd	r24, Y+17	; 0x11
    3070:	9a 89       	ldd	r25, Y+18	; 0x12
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	f1 f7       	brne	.-4      	; 0x3072 <LCD_sendCommand+0x75a>
    3076:	9a 8b       	std	Y+18, r25	; 0x12
    3078:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307a:	8b 89       	ldd	r24, Y+19	; 0x13
    307c:	9c 89       	ldd	r25, Y+20	; 0x14
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	9c 8b       	std	Y+20, r25	; 0x14
    3082:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3084:	8b 89       	ldd	r24, Y+19	; 0x13
    3086:	9c 89       	ldd	r25, Y+20	; 0x14
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	69 f7       	brne	.-38     	; 0x3066 <LCD_sendCommand+0x74e>
    308c:	14 c0       	rjmp	.+40     	; 0x30b6 <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308e:	6d 89       	ldd	r22, Y+21	; 0x15
    3090:	7e 89       	ldd	r23, Y+22	; 0x16
    3092:	8f 89       	ldd	r24, Y+23	; 0x17
    3094:	98 8d       	ldd	r25, Y+24	; 0x18
    3096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	9c 8b       	std	Y+20, r25	; 0x14
    30a0:	8b 8b       	std	Y+19, r24	; 0x13
    30a2:	8b 89       	ldd	r24, Y+19	; 0x13
    30a4:	9c 89       	ldd	r25, Y+20	; 0x14
    30a6:	98 8b       	std	Y+16, r25	; 0x10
    30a8:	8f 87       	std	Y+15, r24	; 0x0f
    30aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ac:	98 89       	ldd	r25, Y+16	; 0x10
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <LCD_sendCommand+0x796>
    30b2:	98 8b       	std	Y+16, r25	; 0x10
    30b4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	62 e0       	ldi	r22, 0x02	; 2
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	a0 e8       	ldi	r26, 0x80	; 128
    30c6:	bf e3       	ldi	r27, 0x3F	; 63
    30c8:	8b 87       	std	Y+11, r24	; 0x0b
    30ca:	9c 87       	std	Y+12, r25	; 0x0c
    30cc:	ad 87       	std	Y+13, r26	; 0x0d
    30ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	4a e7       	ldi	r20, 0x7A	; 122
    30de:	53 e4       	ldi	r21, 0x43	; 67
    30e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	8f 83       	std	Y+7, r24	; 0x07
    30ea:	98 87       	std	Y+8, r25	; 0x08
    30ec:	a9 87       	std	Y+9, r26	; 0x09
    30ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30f0:	6f 81       	ldd	r22, Y+7	; 0x07
    30f2:	78 85       	ldd	r23, Y+8	; 0x08
    30f4:	89 85       	ldd	r24, Y+9	; 0x09
    30f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	40 e8       	ldi	r20, 0x80	; 128
    30fe:	5f e3       	ldi	r21, 0x3F	; 63
    3100:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3104:	88 23       	and	r24, r24
    3106:	2c f4       	brge	.+10     	; 0x3112 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	9e 83       	std	Y+6, r25	; 0x06
    310e:	8d 83       	std	Y+5, r24	; 0x05
    3110:	3f c0       	rjmp	.+126    	; 0x3190 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    3112:	6f 81       	ldd	r22, Y+7	; 0x07
    3114:	78 85       	ldd	r23, Y+8	; 0x08
    3116:	89 85       	ldd	r24, Y+9	; 0x09
    3118:	9a 85       	ldd	r25, Y+10	; 0x0a
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	3f ef       	ldi	r19, 0xFF	; 255
    311e:	4f e7       	ldi	r20, 0x7F	; 127
    3120:	57 e4       	ldi	r21, 0x47	; 71
    3122:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3126:	18 16       	cp	r1, r24
    3128:	4c f5       	brge	.+82     	; 0x317c <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312a:	6b 85       	ldd	r22, Y+11	; 0x0b
    312c:	7c 85       	ldd	r23, Y+12	; 0x0c
    312e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3130:	9e 85       	ldd	r25, Y+14	; 0x0e
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	40 e2       	ldi	r20, 0x20	; 32
    3138:	51 e4       	ldi	r21, 0x41	; 65
    313a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	bc 01       	movw	r22, r24
    3144:	cd 01       	movw	r24, r26
    3146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	9e 83       	std	Y+6, r25	; 0x06
    3150:	8d 83       	std	Y+5, r24	; 0x05
    3152:	0f c0       	rjmp	.+30     	; 0x3172 <LCD_sendCommand+0x85a>
    3154:	89 e1       	ldi	r24, 0x19	; 25
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	9c 83       	std	Y+4, r25	; 0x04
    315a:	8b 83       	std	Y+3, r24	; 0x03
    315c:	8b 81       	ldd	r24, Y+3	; 0x03
    315e:	9c 81       	ldd	r25, Y+4	; 0x04
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <LCD_sendCommand+0x848>
    3164:	9c 83       	std	Y+4, r25	; 0x04
    3166:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3168:	8d 81       	ldd	r24, Y+5	; 0x05
    316a:	9e 81       	ldd	r25, Y+6	; 0x06
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	9e 83       	std	Y+6, r25	; 0x06
    3170:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3172:	8d 81       	ldd	r24, Y+5	; 0x05
    3174:	9e 81       	ldd	r25, Y+6	; 0x06
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	69 f7       	brne	.-38     	; 0x3154 <LCD_sendCommand+0x83c>
    317a:	14 c0       	rjmp	.+40     	; 0x31a4 <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317c:	6f 81       	ldd	r22, Y+7	; 0x07
    317e:	78 85       	ldd	r23, Y+8	; 0x08
    3180:	89 85       	ldd	r24, Y+9	; 0x09
    3182:	9a 85       	ldd	r25, Y+10	; 0x0a
    3184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	9e 83       	std	Y+6, r25	; 0x06
    318e:	8d 83       	std	Y+5, r24	; 0x05
    3190:	8d 81       	ldd	r24, Y+5	; 0x05
    3192:	9e 81       	ldd	r25, Y+6	; 0x06
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	f1 f7       	brne	.-4      	; 0x319c <LCD_sendCommand+0x884>
    31a0:	9a 83       	std	Y+2, r25	; 0x02
    31a2:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    31a4:	cd 59       	subi	r28, 0x9D	; 157
    31a6:	df 4f       	sbci	r29, 0xFF	; 255
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	08 95       	ret

000031bc <LCD_displayCharacter>:


// Displays a character on the LCD
void LCD_displayCharacter(uint8 data) {
    31bc:	0f 93       	push	r16
    31be:	1f 93       	push	r17
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	c3 56       	subi	r28, 0x63	; 99
    31ca:	d0 40       	sbci	r29, 0x00	; 0
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	fe 01       	movw	r30, r28
    31d8:	ed 59       	subi	r30, 0x9D	; 157
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	61 e0       	ldi	r22, 0x01	; 1
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    31e8:	fe 01       	movw	r30, r28
    31ea:	e1 5a       	subi	r30, 0xA1	; 161
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	a0 e8       	ldi	r26, 0x80	; 128
    31f4:	bf e3       	ldi	r27, 0x3F	; 63
    31f6:	80 83       	st	Z, r24
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	a2 83       	std	Z+2, r26	; 0x02
    31fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fe:	8e 01       	movw	r16, r28
    3200:	05 5a       	subi	r16, 0xA5	; 165
    3202:	1f 4f       	sbci	r17, 0xFF	; 255
    3204:	fe 01       	movw	r30, r28
    3206:	e1 5a       	subi	r30, 0xA1	; 161
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	60 81       	ld	r22, Z
    320c:	71 81       	ldd	r23, Z+1	; 0x01
    320e:	82 81       	ldd	r24, Z+2	; 0x02
    3210:	93 81       	ldd	r25, Z+3	; 0x03
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	4a e7       	ldi	r20, 0x7A	; 122
    3218:	53 e4       	ldi	r21, 0x43	; 67
    321a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	f8 01       	movw	r30, r16
    3224:	80 83       	st	Z, r24
    3226:	91 83       	std	Z+1, r25	; 0x01
    3228:	a2 83       	std	Z+2, r26	; 0x02
    322a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    322c:	fe 01       	movw	r30, r28
    322e:	e5 5a       	subi	r30, 0xA5	; 165
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	60 81       	ld	r22, Z
    3234:	71 81       	ldd	r23, Z+1	; 0x01
    3236:	82 81       	ldd	r24, Z+2	; 0x02
    3238:	93 81       	ldd	r25, Z+3	; 0x03
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	44 f4       	brge	.+16     	; 0x325a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    324a:	fe 01       	movw	r30, r28
    324c:	e7 5a       	subi	r30, 0xA7	; 167
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	91 83       	std	Z+1, r25	; 0x01
    3256:	80 83       	st	Z, r24
    3258:	64 c0       	rjmp	.+200    	; 0x3322 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    325a:	fe 01       	movw	r30, r28
    325c:	e5 5a       	subi	r30, 0xA5	; 165
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	60 81       	ld	r22, Z
    3262:	71 81       	ldd	r23, Z+1	; 0x01
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	93 81       	ldd	r25, Z+3	; 0x03
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	3f ef       	ldi	r19, 0xFF	; 255
    326c:	4f e7       	ldi	r20, 0x7F	; 127
    326e:	57 e4       	ldi	r21, 0x47	; 71
    3270:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3274:	18 16       	cp	r1, r24
    3276:	0c f0       	brlt	.+2      	; 0x327a <LCD_displayCharacter+0xbe>
    3278:	43 c0       	rjmp	.+134    	; 0x3300 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    327a:	fe 01       	movw	r30, r28
    327c:	e1 5a       	subi	r30, 0xA1	; 161
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	60 81       	ld	r22, Z
    3282:	71 81       	ldd	r23, Z+1	; 0x01
    3284:	82 81       	ldd	r24, Z+2	; 0x02
    3286:	93 81       	ldd	r25, Z+3	; 0x03
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e2       	ldi	r20, 0x20	; 32
    328e:	51 e4       	ldi	r21, 0x41	; 65
    3290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	8e 01       	movw	r16, r28
    329a:	07 5a       	subi	r16, 0xA7	; 167
    329c:	1f 4f       	sbci	r17, 0xFF	; 255
    329e:	bc 01       	movw	r22, r24
    32a0:	cd 01       	movw	r24, r26
    32a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	f8 01       	movw	r30, r16
    32ac:	91 83       	std	Z+1, r25	; 0x01
    32ae:	80 83       	st	Z, r24
    32b0:	1f c0       	rjmp	.+62     	; 0x32f0 <LCD_displayCharacter+0x134>
    32b2:	fe 01       	movw	r30, r28
    32b4:	e9 5a       	subi	r30, 0xA9	; 169
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	89 e1       	ldi	r24, 0x19	; 25
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	91 83       	std	Z+1, r25	; 0x01
    32be:	80 83       	st	Z, r24
    32c0:	fe 01       	movw	r30, r28
    32c2:	e9 5a       	subi	r30, 0xA9	; 169
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 81       	ld	r24, Z
    32c8:	91 81       	ldd	r25, Z+1	; 0x01
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <LCD_displayCharacter+0x10e>
    32ce:	fe 01       	movw	r30, r28
    32d0:	e9 5a       	subi	r30, 0xA9	; 169
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d8:	de 01       	movw	r26, r28
    32da:	a7 5a       	subi	r26, 0xA7	; 167
    32dc:	bf 4f       	sbci	r27, 0xFF	; 255
    32de:	fe 01       	movw	r30, r28
    32e0:	e7 5a       	subi	r30, 0xA7	; 167
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 81       	ld	r24, Z
    32e6:	91 81       	ldd	r25, Z+1	; 0x01
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	11 96       	adiw	r26, 0x01	; 1
    32ec:	9c 93       	st	X, r25
    32ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f0:	fe 01       	movw	r30, r28
    32f2:	e7 5a       	subi	r30, 0xA7	; 167
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	80 81       	ld	r24, Z
    32f8:	91 81       	ldd	r25, Z+1	; 0x01
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	d1 f6       	brne	.-76     	; 0x32b2 <LCD_displayCharacter+0xf6>
    32fe:	27 c0       	rjmp	.+78     	; 0x334e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3300:	8e 01       	movw	r16, r28
    3302:	07 5a       	subi	r16, 0xA7	; 167
    3304:	1f 4f       	sbci	r17, 0xFF	; 255
    3306:	fe 01       	movw	r30, r28
    3308:	e5 5a       	subi	r30, 0xA5	; 165
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	60 81       	ld	r22, Z
    330e:	71 81       	ldd	r23, Z+1	; 0x01
    3310:	82 81       	ldd	r24, Z+2	; 0x02
    3312:	93 81       	ldd	r25, Z+3	; 0x03
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	f8 01       	movw	r30, r16
    331e:	91 83       	std	Z+1, r25	; 0x01
    3320:	80 83       	st	Z, r24
    3322:	de 01       	movw	r26, r28
    3324:	ab 5a       	subi	r26, 0xAB	; 171
    3326:	bf 4f       	sbci	r27, 0xFF	; 255
    3328:	fe 01       	movw	r30, r28
    332a:	e7 5a       	subi	r30, 0xA7	; 167
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	80 81       	ld	r24, Z
    3330:	91 81       	ldd	r25, Z+1	; 0x01
    3332:	8d 93       	st	X+, r24
    3334:	9c 93       	st	X, r25
    3336:	fe 01       	movw	r30, r28
    3338:	eb 5a       	subi	r30, 0xAB	; 171
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	80 81       	ld	r24, Z
    333e:	91 81       	ldd	r25, Z+1	; 0x01
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	f1 f7       	brne	.-4      	; 0x3340 <LCD_displayCharacter+0x184>
    3344:	fe 01       	movw	r30, r28
    3346:	eb 5a       	subi	r30, 0xAB	; 171
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	91 83       	std	Z+1, r25	; 0x01
    334c:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	62 e0       	ldi	r22, 0x02	; 2
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    3358:	fe 01       	movw	r30, r28
    335a:	ef 5a       	subi	r30, 0xAF	; 175
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	a0 e8       	ldi	r26, 0x80	; 128
    3364:	bf e3       	ldi	r27, 0x3F	; 63
    3366:	80 83       	st	Z, r24
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	a2 83       	std	Z+2, r26	; 0x02
    336c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336e:	8e 01       	movw	r16, r28
    3370:	03 5b       	subi	r16, 0xB3	; 179
    3372:	1f 4f       	sbci	r17, 0xFF	; 255
    3374:	fe 01       	movw	r30, r28
    3376:	ef 5a       	subi	r30, 0xAF	; 175
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	4a e7       	ldi	r20, 0x7A	; 122
    3388:	53 e4       	ldi	r21, 0x43	; 67
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	f8 01       	movw	r30, r16
    3394:	80 83       	st	Z, r24
    3396:	91 83       	std	Z+1, r25	; 0x01
    3398:	a2 83       	std	Z+2, r26	; 0x02
    339a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    339c:	fe 01       	movw	r30, r28
    339e:	e3 5b       	subi	r30, 0xB3	; 179
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33b6:	88 23       	and	r24, r24
    33b8:	44 f4       	brge	.+16     	; 0x33ca <LCD_displayCharacter+0x20e>
		__ticks = 1;
    33ba:	fe 01       	movw	r30, r28
    33bc:	e5 5b       	subi	r30, 0xB5	; 181
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	80 83       	st	Z, r24
    33c8:	64 c0       	rjmp	.+200    	; 0x3492 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    33ca:	fe 01       	movw	r30, r28
    33cc:	e3 5b       	subi	r30, 0xB3	; 179
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	93 81       	ldd	r25, Z+3	; 0x03
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	3f ef       	ldi	r19, 0xFF	; 255
    33dc:	4f e7       	ldi	r20, 0x7F	; 127
    33de:	57 e4       	ldi	r21, 0x47	; 71
    33e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33e4:	18 16       	cp	r1, r24
    33e6:	0c f0       	brlt	.+2      	; 0x33ea <LCD_displayCharacter+0x22e>
    33e8:	43 c0       	rjmp	.+134    	; 0x3470 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ea:	fe 01       	movw	r30, r28
    33ec:	ef 5a       	subi	r30, 0xAF	; 175
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	60 81       	ld	r22, Z
    33f2:	71 81       	ldd	r23, Z+1	; 0x01
    33f4:	82 81       	ldd	r24, Z+2	; 0x02
    33f6:	93 81       	ldd	r25, Z+3	; 0x03
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	8e 01       	movw	r16, r28
    340a:	05 5b       	subi	r16, 0xB5	; 181
    340c:	1f 4f       	sbci	r17, 0xFF	; 255
    340e:	bc 01       	movw	r22, r24
    3410:	cd 01       	movw	r24, r26
    3412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	f8 01       	movw	r30, r16
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	80 83       	st	Z, r24
    3420:	1f c0       	rjmp	.+62     	; 0x3460 <LCD_displayCharacter+0x2a4>
    3422:	fe 01       	movw	r30, r28
    3424:	e7 5b       	subi	r30, 0xB7	; 183
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	89 e1       	ldi	r24, 0x19	; 25
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	80 83       	st	Z, r24
    3430:	fe 01       	movw	r30, r28
    3432:	e7 5b       	subi	r30, 0xB7	; 183
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 81       	ld	r24, Z
    3438:	91 81       	ldd	r25, Z+1	; 0x01
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <LCD_displayCharacter+0x27e>
    343e:	fe 01       	movw	r30, r28
    3440:	e7 5b       	subi	r30, 0xB7	; 183
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3448:	de 01       	movw	r26, r28
    344a:	a5 5b       	subi	r26, 0xB5	; 181
    344c:	bf 4f       	sbci	r27, 0xFF	; 255
    344e:	fe 01       	movw	r30, r28
    3450:	e5 5b       	subi	r30, 0xB5	; 181
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	11 96       	adiw	r26, 0x01	; 1
    345c:	9c 93       	st	X, r25
    345e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3460:	fe 01       	movw	r30, r28
    3462:	e5 5b       	subi	r30, 0xB5	; 181
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	91 81       	ldd	r25, Z+1	; 0x01
    346a:	00 97       	sbiw	r24, 0x00	; 0
    346c:	d1 f6       	brne	.-76     	; 0x3422 <LCD_displayCharacter+0x266>
    346e:	27 c0       	rjmp	.+78     	; 0x34be <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3470:	8e 01       	movw	r16, r28
    3472:	05 5b       	subi	r16, 0xB5	; 181
    3474:	1f 4f       	sbci	r17, 0xFF	; 255
    3476:	fe 01       	movw	r30, r28
    3478:	e3 5b       	subi	r30, 0xB3	; 179
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	82 81       	ldd	r24, Z+2	; 0x02
    3482:	93 81       	ldd	r25, Z+3	; 0x03
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	f8 01       	movw	r30, r16
    348e:	91 83       	std	Z+1, r25	; 0x01
    3490:	80 83       	st	Z, r24
    3492:	de 01       	movw	r26, r28
    3494:	a9 5b       	subi	r26, 0xB9	; 185
    3496:	bf 4f       	sbci	r27, 0xFF	; 255
    3498:	fe 01       	movw	r30, r28
    349a:	e5 5b       	subi	r30, 0xB5	; 181
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	80 81       	ld	r24, Z
    34a0:	91 81       	ldd	r25, Z+1	; 0x01
    34a2:	8d 93       	st	X+, r24
    34a4:	9c 93       	st	X, r25
    34a6:	fe 01       	movw	r30, r28
    34a8:	e9 5b       	subi	r30, 0xB9	; 185
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	91 81       	ldd	r25, Z+1	; 0x01
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <LCD_displayCharacter+0x2f4>
    34b4:	fe 01       	movw	r30, r28
    34b6:	e9 5b       	subi	r30, 0xB9	; 185
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	91 83       	std	Z+1, r25	; 0x01
    34bc:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the data in the assigned PORT to be sent to the LCD
	// Inserts the data in the assigned PORT to be sent to the LCD
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 4 ));
    34be:	fe 01       	movw	r30, r28
    34c0:	ed 59       	subi	r30, 0x9D	; 157
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 81       	ld	r24, Z
    34c6:	82 95       	swap	r24
    34c8:	8f 70       	andi	r24, 0x0F	; 15
    34ca:	98 2f       	mov	r25, r24
    34cc:	91 70       	andi	r25, 0x01	; 1
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	63 e0       	ldi	r22, 0x03	; 3
    34d2:	49 2f       	mov	r20, r25
    34d4:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 5 ));
    34d8:	fe 01       	movw	r30, r28
    34da:	ed 59       	subi	r30, 0x9D	; 157
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	80 81       	ld	r24, Z
    34e0:	82 95       	swap	r24
    34e2:	86 95       	lsr	r24
    34e4:	87 70       	andi	r24, 0x07	; 7
    34e6:	98 2f       	mov	r25, r24
    34e8:	91 70       	andi	r25, 0x01	; 1
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	64 e0       	ldi	r22, 0x04	; 4
    34ee:	49 2f       	mov	r20, r25
    34f0:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 6 ));
    34f4:	fe 01       	movw	r30, r28
    34f6:	ed 59       	subi	r30, 0x9D	; 157
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	80 81       	ld	r24, Z
    34fc:	82 95       	swap	r24
    34fe:	86 95       	lsr	r24
    3500:	86 95       	lsr	r24
    3502:	83 70       	andi	r24, 0x03	; 3
    3504:	98 2f       	mov	r25, r24
    3506:	91 70       	andi	r25, 0x01	; 1
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	65 e0       	ldi	r22, 0x05	; 5
    350c:	49 2f       	mov	r20, r25
    350e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 7 ));
    3512:	fe 01       	movw	r30, r28
    3514:	ed 59       	subi	r30, 0x9D	; 157
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	80 81       	ld	r24, Z
    351a:	98 2f       	mov	r25, r24
    351c:	99 1f       	adc	r25, r25
    351e:	99 27       	eor	r25, r25
    3520:	99 1f       	adc	r25, r25
    3522:	80 e0       	ldi	r24, 0x00	; 0
    3524:	66 e0       	ldi	r22, 0x06	; 6
    3526:	49 2f       	mov	r20, r25
    3528:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    352c:	fe 01       	movw	r30, r28
    352e:	ed 5b       	subi	r30, 0xBD	; 189
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	a0 e8       	ldi	r26, 0x80	; 128
    3538:	bf e3       	ldi	r27, 0x3F	; 63
    353a:	80 83       	st	Z, r24
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	a2 83       	std	Z+2, r26	; 0x02
    3540:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3542:	8e 01       	movw	r16, r28
    3544:	01 5c       	subi	r16, 0xC1	; 193
    3546:	1f 4f       	sbci	r17, 0xFF	; 255
    3548:	fe 01       	movw	r30, r28
    354a:	ed 5b       	subi	r30, 0xBD	; 189
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	60 81       	ld	r22, Z
    3550:	71 81       	ldd	r23, Z+1	; 0x01
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	4a e7       	ldi	r20, 0x7A	; 122
    355c:	53 e4       	ldi	r21, 0x43	; 67
    355e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	f8 01       	movw	r30, r16
    3568:	80 83       	st	Z, r24
    356a:	91 83       	std	Z+1, r25	; 0x01
    356c:	a2 83       	std	Z+2, r26	; 0x02
    356e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3570:	fe 01       	movw	r30, r28
    3572:	ff 96       	adiw	r30, 0x3f	; 63
    3574:	60 81       	ld	r22, Z
    3576:	71 81       	ldd	r23, Z+1	; 0x01
    3578:	82 81       	ldd	r24, Z+2	; 0x02
    357a:	93 81       	ldd	r25, Z+3	; 0x03
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e8       	ldi	r20, 0x80	; 128
    3582:	5f e3       	ldi	r21, 0x3F	; 63
    3584:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3588:	88 23       	and	r24, r24
    358a:	2c f4       	brge	.+10     	; 0x3596 <LCD_displayCharacter+0x3da>
		__ticks = 1;
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	9e af       	std	Y+62, r25	; 0x3e
    3592:	8d af       	std	Y+61, r24	; 0x3d
    3594:	46 c0       	rjmp	.+140    	; 0x3622 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    3596:	fe 01       	movw	r30, r28
    3598:	ff 96       	adiw	r30, 0x3f	; 63
    359a:	60 81       	ld	r22, Z
    359c:	71 81       	ldd	r23, Z+1	; 0x01
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	3f ef       	ldi	r19, 0xFF	; 255
    35a6:	4f e7       	ldi	r20, 0x7F	; 127
    35a8:	57 e4       	ldi	r21, 0x47	; 71
    35aa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35ae:	18 16       	cp	r1, r24
    35b0:	64 f5       	brge	.+88     	; 0x360a <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b2:	fe 01       	movw	r30, r28
    35b4:	ed 5b       	subi	r30, 0xBD	; 189
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	60 81       	ld	r22, Z
    35ba:	71 81       	ldd	r23, Z+1	; 0x01
    35bc:	82 81       	ldd	r24, Z+2	; 0x02
    35be:	93 81       	ldd	r25, Z+3	; 0x03
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	40 e2       	ldi	r20, 0x20	; 32
    35c6:	51 e4       	ldi	r21, 0x41	; 65
    35c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	bc 01       	movw	r22, r24
    35d2:	cd 01       	movw	r24, r26
    35d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	9e af       	std	Y+62, r25	; 0x3e
    35de:	8d af       	std	Y+61, r24	; 0x3d
    35e0:	0f c0       	rjmp	.+30     	; 0x3600 <LCD_displayCharacter+0x444>
    35e2:	89 e1       	ldi	r24, 0x19	; 25
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9c af       	std	Y+60, r25	; 0x3c
    35e8:	8b af       	std	Y+59, r24	; 0x3b
    35ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    35ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	f1 f7       	brne	.-4      	; 0x35ee <LCD_displayCharacter+0x432>
    35f2:	9c af       	std	Y+60, r25	; 0x3c
    35f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    35f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	9e af       	std	Y+62, r25	; 0x3e
    35fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3600:	8d ad       	ldd	r24, Y+61	; 0x3d
    3602:	9e ad       	ldd	r25, Y+62	; 0x3e
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	69 f7       	brne	.-38     	; 0x35e2 <LCD_displayCharacter+0x426>
    3608:	16 c0       	rjmp	.+44     	; 0x3636 <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360a:	fe 01       	movw	r30, r28
    360c:	ff 96       	adiw	r30, 0x3f	; 63
    360e:	60 81       	ld	r22, Z
    3610:	71 81       	ldd	r23, Z+1	; 0x01
    3612:	82 81       	ldd	r24, Z+2	; 0x02
    3614:	93 81       	ldd	r25, Z+3	; 0x03
    3616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	9e af       	std	Y+62, r25	; 0x3e
    3620:	8d af       	std	Y+61, r24	; 0x3d
    3622:	8d ad       	ldd	r24, Y+61	; 0x3d
    3624:	9e ad       	ldd	r25, Y+62	; 0x3e
    3626:	9a af       	std	Y+58, r25	; 0x3a
    3628:	89 af       	std	Y+57, r24	; 0x39
    362a:	89 ad       	ldd	r24, Y+57	; 0x39
    362c:	9a ad       	ldd	r25, Y+58	; 0x3a
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	f1 f7       	brne	.-4      	; 0x362e <LCD_displayCharacter+0x472>
    3632:	9a af       	std	Y+58, r25	; 0x3a
    3634:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	62 e0       	ldi	r22, 0x02	; 2
    363a:	40 e0       	ldi	r20, 0x00	; 0
    363c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	a0 e8       	ldi	r26, 0x80	; 128
    3646:	bf e3       	ldi	r27, 0x3F	; 63
    3648:	8d ab       	std	Y+53, r24	; 0x35
    364a:	9e ab       	std	Y+54, r25	; 0x36
    364c:	af ab       	std	Y+55, r26	; 0x37
    364e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3650:	6d a9       	ldd	r22, Y+53	; 0x35
    3652:	7e a9       	ldd	r23, Y+54	; 0x36
    3654:	8f a9       	ldd	r24, Y+55	; 0x37
    3656:	98 ad       	ldd	r25, Y+56	; 0x38
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	4a e7       	ldi	r20, 0x7A	; 122
    365e:	53 e4       	ldi	r21, 0x43	; 67
    3660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	89 ab       	std	Y+49, r24	; 0x31
    366a:	9a ab       	std	Y+50, r25	; 0x32
    366c:	ab ab       	std	Y+51, r26	; 0x33
    366e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3670:	69 a9       	ldd	r22, Y+49	; 0x31
    3672:	7a a9       	ldd	r23, Y+50	; 0x32
    3674:	8b a9       	ldd	r24, Y+51	; 0x33
    3676:	9c a9       	ldd	r25, Y+52	; 0x34
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e8       	ldi	r20, 0x80	; 128
    367e:	5f e3       	ldi	r21, 0x3F	; 63
    3680:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3684:	88 23       	and	r24, r24
    3686:	2c f4       	brge	.+10     	; 0x3692 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	98 ab       	std	Y+48, r25	; 0x30
    368e:	8f a7       	std	Y+47, r24	; 0x2f
    3690:	3f c0       	rjmp	.+126    	; 0x3710 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    3692:	69 a9       	ldd	r22, Y+49	; 0x31
    3694:	7a a9       	ldd	r23, Y+50	; 0x32
    3696:	8b a9       	ldd	r24, Y+51	; 0x33
    3698:	9c a9       	ldd	r25, Y+52	; 0x34
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	3f ef       	ldi	r19, 0xFF	; 255
    369e:	4f e7       	ldi	r20, 0x7F	; 127
    36a0:	57 e4       	ldi	r21, 0x47	; 71
    36a2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36a6:	18 16       	cp	r1, r24
    36a8:	4c f5       	brge	.+82     	; 0x36fc <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36aa:	6d a9       	ldd	r22, Y+53	; 0x35
    36ac:	7e a9       	ldd	r23, Y+54	; 0x36
    36ae:	8f a9       	ldd	r24, Y+55	; 0x37
    36b0:	98 ad       	ldd	r25, Y+56	; 0x38
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	40 e2       	ldi	r20, 0x20	; 32
    36b8:	51 e4       	ldi	r21, 0x41	; 65
    36ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	bc 01       	movw	r22, r24
    36c4:	cd 01       	movw	r24, r26
    36c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	98 ab       	std	Y+48, r25	; 0x30
    36d0:	8f a7       	std	Y+47, r24	; 0x2f
    36d2:	0f c0       	rjmp	.+30     	; 0x36f2 <LCD_displayCharacter+0x536>
    36d4:	89 e1       	ldi	r24, 0x19	; 25
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	9e a7       	std	Y+46, r25	; 0x2e
    36da:	8d a7       	std	Y+45, r24	; 0x2d
    36dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    36de:	9e a5       	ldd	r25, Y+46	; 0x2e
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <LCD_displayCharacter+0x524>
    36e4:	9e a7       	std	Y+46, r25	; 0x2e
    36e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ea:	98 a9       	ldd	r25, Y+48	; 0x30
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	98 ab       	std	Y+48, r25	; 0x30
    36f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36f4:	98 a9       	ldd	r25, Y+48	; 0x30
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	69 f7       	brne	.-38     	; 0x36d4 <LCD_displayCharacter+0x518>
    36fa:	14 c0       	rjmp	.+40     	; 0x3724 <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fc:	69 a9       	ldd	r22, Y+49	; 0x31
    36fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3700:	8b a9       	ldd	r24, Y+51	; 0x33
    3702:	9c a9       	ldd	r25, Y+52	; 0x34
    3704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	98 ab       	std	Y+48, r25	; 0x30
    370e:	8f a7       	std	Y+47, r24	; 0x2f
    3710:	8f a5       	ldd	r24, Y+47	; 0x2f
    3712:	98 a9       	ldd	r25, Y+48	; 0x30
    3714:	9c a7       	std	Y+44, r25	; 0x2c
    3716:	8b a7       	std	Y+43, r24	; 0x2b
    3718:	8b a5       	ldd	r24, Y+43	; 0x2b
    371a:	9c a5       	ldd	r25, Y+44	; 0x2c
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <LCD_displayCharacter+0x560>
    3720:	9c a7       	std	Y+44, r25	; 0x2c
    3722:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	62 e0       	ldi	r22, 0x02	; 2
    3728:	41 e0       	ldi	r20, 0x01	; 1
    372a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	a0 e8       	ldi	r26, 0x80	; 128
    3734:	bf e3       	ldi	r27, 0x3F	; 63
    3736:	8f a3       	std	Y+39, r24	; 0x27
    3738:	98 a7       	std	Y+40, r25	; 0x28
    373a:	a9 a7       	std	Y+41, r26	; 0x29
    373c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373e:	6f a1       	ldd	r22, Y+39	; 0x27
    3740:	78 a5       	ldd	r23, Y+40	; 0x28
    3742:	89 a5       	ldd	r24, Y+41	; 0x29
    3744:	9a a5       	ldd	r25, Y+42	; 0x2a
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	4a e7       	ldi	r20, 0x7A	; 122
    374c:	53 e4       	ldi	r21, 0x43	; 67
    374e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	8b a3       	std	Y+35, r24	; 0x23
    3758:	9c a3       	std	Y+36, r25	; 0x24
    375a:	ad a3       	std	Y+37, r26	; 0x25
    375c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    375e:	6b a1       	ldd	r22, Y+35	; 0x23
    3760:	7c a1       	ldd	r23, Y+36	; 0x24
    3762:	8d a1       	ldd	r24, Y+37	; 0x25
    3764:	9e a1       	ldd	r25, Y+38	; 0x26
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	40 e8       	ldi	r20, 0x80	; 128
    376c:	5f e3       	ldi	r21, 0x3F	; 63
    376e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3772:	88 23       	and	r24, r24
    3774:	2c f4       	brge	.+10     	; 0x3780 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	9a a3       	std	Y+34, r25	; 0x22
    377c:	89 a3       	std	Y+33, r24	; 0x21
    377e:	3f c0       	rjmp	.+126    	; 0x37fe <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    3780:	6b a1       	ldd	r22, Y+35	; 0x23
    3782:	7c a1       	ldd	r23, Y+36	; 0x24
    3784:	8d a1       	ldd	r24, Y+37	; 0x25
    3786:	9e a1       	ldd	r25, Y+38	; 0x26
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	3f ef       	ldi	r19, 0xFF	; 255
    378c:	4f e7       	ldi	r20, 0x7F	; 127
    378e:	57 e4       	ldi	r21, 0x47	; 71
    3790:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3794:	18 16       	cp	r1, r24
    3796:	4c f5       	brge	.+82     	; 0x37ea <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3798:	6f a1       	ldd	r22, Y+39	; 0x27
    379a:	78 a5       	ldd	r23, Y+40	; 0x28
    379c:	89 a5       	ldd	r24, Y+41	; 0x29
    379e:	9a a5       	ldd	r25, Y+42	; 0x2a
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e2       	ldi	r20, 0x20	; 32
    37a6:	51 e4       	ldi	r21, 0x41	; 65
    37a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	bc 01       	movw	r22, r24
    37b2:	cd 01       	movw	r24, r26
    37b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	9a a3       	std	Y+34, r25	; 0x22
    37be:	89 a3       	std	Y+33, r24	; 0x21
    37c0:	0f c0       	rjmp	.+30     	; 0x37e0 <LCD_displayCharacter+0x624>
    37c2:	89 e1       	ldi	r24, 0x19	; 25
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	98 a3       	std	Y+32, r25	; 0x20
    37c8:	8f 8f       	std	Y+31, r24	; 0x1f
    37ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37cc:	98 a1       	ldd	r25, Y+32	; 0x20
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	f1 f7       	brne	.-4      	; 0x37ce <LCD_displayCharacter+0x612>
    37d2:	98 a3       	std	Y+32, r25	; 0x20
    37d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d6:	89 a1       	ldd	r24, Y+33	; 0x21
    37d8:	9a a1       	ldd	r25, Y+34	; 0x22
    37da:	01 97       	sbiw	r24, 0x01	; 1
    37dc:	9a a3       	std	Y+34, r25	; 0x22
    37de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e0:	89 a1       	ldd	r24, Y+33	; 0x21
    37e2:	9a a1       	ldd	r25, Y+34	; 0x22
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	69 f7       	brne	.-38     	; 0x37c2 <LCD_displayCharacter+0x606>
    37e8:	14 c0       	rjmp	.+40     	; 0x3812 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ea:	6b a1       	ldd	r22, Y+35	; 0x23
    37ec:	7c a1       	ldd	r23, Y+36	; 0x24
    37ee:	8d a1       	ldd	r24, Y+37	; 0x25
    37f0:	9e a1       	ldd	r25, Y+38	; 0x26
    37f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	9a a3       	std	Y+34, r25	; 0x22
    37fc:	89 a3       	std	Y+33, r24	; 0x21
    37fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3800:	9a a1       	ldd	r25, Y+34	; 0x22
    3802:	9e 8f       	std	Y+30, r25	; 0x1e
    3804:	8d 8f       	std	Y+29, r24	; 0x1d
    3806:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3808:	9e 8d       	ldd	r25, Y+30	; 0x1e
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <LCD_displayCharacter+0x64e>
    380e:	9e 8f       	std	Y+30, r25	; 0x1e
    3810:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 0 ));
    3812:	fe 01       	movw	r30, r28
    3814:	ed 59       	subi	r30, 0x9D	; 157
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	80 81       	ld	r24, Z
    381a:	98 2f       	mov	r25, r24
    381c:	91 70       	andi	r25, 0x01	; 1
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	63 e0       	ldi	r22, 0x03	; 3
    3822:	49 2f       	mov	r20, r25
    3824:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 1 ));
    3828:	fe 01       	movw	r30, r28
    382a:	ed 59       	subi	r30, 0x9D	; 157
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 81       	ld	r24, Z
    3830:	86 95       	lsr	r24
    3832:	98 2f       	mov	r25, r24
    3834:	91 70       	andi	r25, 0x01	; 1
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	64 e0       	ldi	r22, 0x04	; 4
    383a:	49 2f       	mov	r20, r25
    383c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 2 ));
    3840:	fe 01       	movw	r30, r28
    3842:	ed 59       	subi	r30, 0x9D	; 157
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	80 81       	ld	r24, Z
    3848:	86 95       	lsr	r24
    384a:	86 95       	lsr	r24
    384c:	98 2f       	mov	r25, r24
    384e:	91 70       	andi	r25, 0x01	; 1
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	65 e0       	ldi	r22, 0x05	; 5
    3854:	49 2f       	mov	r20, r25
    3856:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 3 ));
    385a:	fe 01       	movw	r30, r28
    385c:	ed 59       	subi	r30, 0x9D	; 157
    385e:	ff 4f       	sbci	r31, 0xFF	; 255
    3860:	80 81       	ld	r24, Z
    3862:	86 95       	lsr	r24
    3864:	86 95       	lsr	r24
    3866:	86 95       	lsr	r24
    3868:	98 2f       	mov	r25, r24
    386a:	91 70       	andi	r25, 0x01	; 1
    386c:	80 e0       	ldi	r24, 0x00	; 0
    386e:	66 e0       	ldi	r22, 0x06	; 6
    3870:	49 2f       	mov	r20, r25
    3872:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	a0 e8       	ldi	r26, 0x80	; 128
    387c:	bf e3       	ldi	r27, 0x3F	; 63
    387e:	89 8f       	std	Y+25, r24	; 0x19
    3880:	9a 8f       	std	Y+26, r25	; 0x1a
    3882:	ab 8f       	std	Y+27, r26	; 0x1b
    3884:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3886:	69 8d       	ldd	r22, Y+25	; 0x19
    3888:	7a 8d       	ldd	r23, Y+26	; 0x1a
    388a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    388c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	4a e7       	ldi	r20, 0x7A	; 122
    3894:	53 e4       	ldi	r21, 0x43	; 67
    3896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	8d 8b       	std	Y+21, r24	; 0x15
    38a0:	9e 8b       	std	Y+22, r25	; 0x16
    38a2:	af 8b       	std	Y+23, r26	; 0x17
    38a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38a6:	6d 89       	ldd	r22, Y+21	; 0x15
    38a8:	7e 89       	ldd	r23, Y+22	; 0x16
    38aa:	8f 89       	ldd	r24, Y+23	; 0x17
    38ac:	98 8d       	ldd	r25, Y+24	; 0x18
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	40 e8       	ldi	r20, 0x80	; 128
    38b4:	5f e3       	ldi	r21, 0x3F	; 63
    38b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    38ba:	88 23       	and	r24, r24
    38bc:	2c f4       	brge	.+10     	; 0x38c8 <LCD_displayCharacter+0x70c>
		__ticks = 1;
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	9c 8b       	std	Y+20, r25	; 0x14
    38c4:	8b 8b       	std	Y+19, r24	; 0x13
    38c6:	3f c0       	rjmp	.+126    	; 0x3946 <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    38c8:	6d 89       	ldd	r22, Y+21	; 0x15
    38ca:	7e 89       	ldd	r23, Y+22	; 0x16
    38cc:	8f 89       	ldd	r24, Y+23	; 0x17
    38ce:	98 8d       	ldd	r25, Y+24	; 0x18
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	3f ef       	ldi	r19, 0xFF	; 255
    38d4:	4f e7       	ldi	r20, 0x7F	; 127
    38d6:	57 e4       	ldi	r21, 0x47	; 71
    38d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    38dc:	18 16       	cp	r1, r24
    38de:	4c f5       	brge	.+82     	; 0x3932 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e0:	69 8d       	ldd	r22, Y+25	; 0x19
    38e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e2       	ldi	r20, 0x20	; 32
    38ee:	51 e4       	ldi	r21, 0x41	; 65
    38f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	9c 8b       	std	Y+20, r25	; 0x14
    3906:	8b 8b       	std	Y+19, r24	; 0x13
    3908:	0f c0       	rjmp	.+30     	; 0x3928 <LCD_displayCharacter+0x76c>
    390a:	89 e1       	ldi	r24, 0x19	; 25
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	9a 8b       	std	Y+18, r25	; 0x12
    3910:	89 8b       	std	Y+17, r24	; 0x11
    3912:	89 89       	ldd	r24, Y+17	; 0x11
    3914:	9a 89       	ldd	r25, Y+18	; 0x12
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <LCD_displayCharacter+0x75a>
    391a:	9a 8b       	std	Y+18, r25	; 0x12
    391c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391e:	8b 89       	ldd	r24, Y+19	; 0x13
    3920:	9c 89       	ldd	r25, Y+20	; 0x14
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	9c 8b       	std	Y+20, r25	; 0x14
    3926:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3928:	8b 89       	ldd	r24, Y+19	; 0x13
    392a:	9c 89       	ldd	r25, Y+20	; 0x14
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	69 f7       	brne	.-38     	; 0x390a <LCD_displayCharacter+0x74e>
    3930:	14 c0       	rjmp	.+40     	; 0x395a <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3932:	6d 89       	ldd	r22, Y+21	; 0x15
    3934:	7e 89       	ldd	r23, Y+22	; 0x16
    3936:	8f 89       	ldd	r24, Y+23	; 0x17
    3938:	98 8d       	ldd	r25, Y+24	; 0x18
    393a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	9c 8b       	std	Y+20, r25	; 0x14
    3944:	8b 8b       	std	Y+19, r24	; 0x13
    3946:	8b 89       	ldd	r24, Y+19	; 0x13
    3948:	9c 89       	ldd	r25, Y+20	; 0x14
    394a:	98 8b       	std	Y+16, r25	; 0x10
    394c:	8f 87       	std	Y+15, r24	; 0x0f
    394e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3950:	98 89       	ldd	r25, Y+16	; 0x10
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	f1 f7       	brne	.-4      	; 0x3952 <LCD_displayCharacter+0x796>
    3956:	98 8b       	std	Y+16, r25	; 0x10
    3958:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	62 e0       	ldi	r22, 0x02	; 2
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	a0 e8       	ldi	r26, 0x80	; 128
    396a:	bf e3       	ldi	r27, 0x3F	; 63
    396c:	8b 87       	std	Y+11, r24	; 0x0b
    396e:	9c 87       	std	Y+12, r25	; 0x0c
    3970:	ad 87       	std	Y+13, r26	; 0x0d
    3972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3974:	6b 85       	ldd	r22, Y+11	; 0x0b
    3976:	7c 85       	ldd	r23, Y+12	; 0x0c
    3978:	8d 85       	ldd	r24, Y+13	; 0x0d
    397a:	9e 85       	ldd	r25, Y+14	; 0x0e
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	4a e7       	ldi	r20, 0x7A	; 122
    3982:	53 e4       	ldi	r21, 0x43	; 67
    3984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	8f 83       	std	Y+7, r24	; 0x07
    398e:	98 87       	std	Y+8, r25	; 0x08
    3990:	a9 87       	std	Y+9, r26	; 0x09
    3992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3994:	6f 81       	ldd	r22, Y+7	; 0x07
    3996:	78 85       	ldd	r23, Y+8	; 0x08
    3998:	89 85       	ldd	r24, Y+9	; 0x09
    399a:	9a 85       	ldd	r25, Y+10	; 0x0a
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	40 e8       	ldi	r20, 0x80	; 128
    39a2:	5f e3       	ldi	r21, 0x3F	; 63
    39a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39a8:	88 23       	and	r24, r24
    39aa:	2c f4       	brge	.+10     	; 0x39b6 <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	9e 83       	std	Y+6, r25	; 0x06
    39b2:	8d 83       	std	Y+5, r24	; 0x05
    39b4:	3f c0       	rjmp	.+126    	; 0x3a34 <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    39b6:	6f 81       	ldd	r22, Y+7	; 0x07
    39b8:	78 85       	ldd	r23, Y+8	; 0x08
    39ba:	89 85       	ldd	r24, Y+9	; 0x09
    39bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	3f ef       	ldi	r19, 0xFF	; 255
    39c2:	4f e7       	ldi	r20, 0x7F	; 127
    39c4:	57 e4       	ldi	r21, 0x47	; 71
    39c6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39ca:	18 16       	cp	r1, r24
    39cc:	4c f5       	brge	.+82     	; 0x3a20 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e2       	ldi	r20, 0x20	; 32
    39dc:	51 e4       	ldi	r21, 0x41	; 65
    39de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	bc 01       	movw	r22, r24
    39e8:	cd 01       	movw	r24, r26
    39ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	9e 83       	std	Y+6, r25	; 0x06
    39f4:	8d 83       	std	Y+5, r24	; 0x05
    39f6:	0f c0       	rjmp	.+30     	; 0x3a16 <LCD_displayCharacter+0x85a>
    39f8:	89 e1       	ldi	r24, 0x19	; 25
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	9c 83       	std	Y+4, r25	; 0x04
    39fe:	8b 83       	std	Y+3, r24	; 0x03
    3a00:	8b 81       	ldd	r24, Y+3	; 0x03
    3a02:	9c 81       	ldd	r25, Y+4	; 0x04
    3a04:	01 97       	sbiw	r24, 0x01	; 1
    3a06:	f1 f7       	brne	.-4      	; 0x3a04 <LCD_displayCharacter+0x848>
    3a08:	9c 83       	std	Y+4, r25	; 0x04
    3a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	9e 83       	std	Y+6, r25	; 0x06
    3a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a16:	8d 81       	ldd	r24, Y+5	; 0x05
    3a18:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1a:	00 97       	sbiw	r24, 0x00	; 0
    3a1c:	69 f7       	brne	.-38     	; 0x39f8 <LCD_displayCharacter+0x83c>
    3a1e:	14 c0       	rjmp	.+40     	; 0x3a48 <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a20:	6f 81       	ldd	r22, Y+7	; 0x07
    3a22:	78 85       	ldd	r23, Y+8	; 0x08
    3a24:	89 85       	ldd	r24, Y+9	; 0x09
    3a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	9e 83       	std	Y+6, r25	; 0x06
    3a32:	8d 83       	std	Y+5, r24	; 0x05
    3a34:	8d 81       	ldd	r24, Y+5	; 0x05
    3a36:	9e 81       	ldd	r25, Y+6	; 0x06
    3a38:	9a 83       	std	Y+2, r25	; 0x02
    3a3a:	89 83       	std	Y+1, r24	; 0x01
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <LCD_displayCharacter+0x884>
    3a44:	9a 83       	std	Y+2, r25	; 0x02
    3a46:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    3a48:	cd 59       	subi	r28, 0x9D	; 157
    3a4a:	df 4f       	sbci	r29, 0xFF	; 255
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	f8 94       	cli
    3a50:	de bf       	out	0x3e, r29	; 62
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	cf 91       	pop	r28
    3a58:	df 91       	pop	r29
    3a5a:	1f 91       	pop	r17
    3a5c:	0f 91       	pop	r16
    3a5e:	08 95       	ret

00003a60 <LCD_displayString>:


// Displays a string on the LCD
void LCD_displayString(const char *str) {
    3a60:	df 93       	push	r29
    3a62:	cf 93       	push	r28
    3a64:	00 d0       	rcall	.+0      	; 0x3a66 <LCD_displayString+0x6>
    3a66:	0f 92       	push	r0
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
    3a6c:	9b 83       	std	Y+3, r25	; 0x03
    3a6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a70:	19 82       	std	Y+1, r1	; 0x01
    3a72:	0e c0       	rjmp	.+28     	; 0x3a90 <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacter(str[i]);
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	28 2f       	mov	r18, r24
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7e:	fc 01       	movw	r30, r24
    3a80:	e2 0f       	add	r30, r18
    3a82:	f3 1f       	adc	r31, r19
    3a84:	80 81       	ld	r24, Z
    3a86:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_displayCharacter>
		i++;
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	8f 5f       	subi	r24, 0xFF	; 255
    3a8e:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	28 2f       	mov	r18, r24
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	8a 81       	ldd	r24, Y+2	; 0x02
    3a98:	9b 81       	ldd	r25, Y+3	; 0x03
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	e2 0f       	add	r30, r18
    3a9e:	f3 1f       	adc	r31, r19
    3aa0:	80 81       	ld	r24, Z
    3aa2:	88 23       	and	r24, r24
    3aa4:	39 f7       	brne	.-50     	; 0x3a74 <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	cf 91       	pop	r28
    3aae:	df 91       	pop	r29
    3ab0:	08 95       	ret

00003ab2 <LCD_moveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_moveCursor(uint8 row, uint8 col) {
    3ab2:	df 93       	push	r29
    3ab4:	cf 93       	push	r28
    3ab6:	00 d0       	rcall	.+0      	; 0x3ab8 <LCD_moveCursor+0x6>
    3ab8:	00 d0       	rcall	.+0      	; 0x3aba <LCD_moveCursor+0x8>
    3aba:	0f 92       	push	r0
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	8a 83       	std	Y+2, r24	; 0x02
    3ac2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    3ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac6:	28 2f       	mov	r18, r24
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	3d 83       	std	Y+5, r19	; 0x05
    3acc:	2c 83       	std	Y+4, r18	; 0x04
    3ace:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ad2:	81 30       	cpi	r24, 0x01	; 1
    3ad4:	91 05       	cpc	r25, r1
    3ad6:	c1 f0       	breq	.+48     	; 0x3b08 <LCD_moveCursor+0x56>
    3ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    3ada:	3d 81       	ldd	r19, Y+5	; 0x05
    3adc:	22 30       	cpi	r18, 0x02	; 2
    3ade:	31 05       	cpc	r19, r1
    3ae0:	2c f4       	brge	.+10     	; 0x3aec <LCD_moveCursor+0x3a>
    3ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae6:	00 97       	sbiw	r24, 0x00	; 0
    3ae8:	61 f0       	breq	.+24     	; 0x3b02 <LCD_moveCursor+0x50>
    3aea:	19 c0       	rjmp	.+50     	; 0x3b1e <LCD_moveCursor+0x6c>
    3aec:	2c 81       	ldd	r18, Y+4	; 0x04
    3aee:	3d 81       	ldd	r19, Y+5	; 0x05
    3af0:	22 30       	cpi	r18, 0x02	; 2
    3af2:	31 05       	cpc	r19, r1
    3af4:	69 f0       	breq	.+26     	; 0x3b10 <LCD_moveCursor+0x5e>
    3af6:	8c 81       	ldd	r24, Y+4	; 0x04
    3af8:	9d 81       	ldd	r25, Y+5	; 0x05
    3afa:	83 30       	cpi	r24, 0x03	; 3
    3afc:	91 05       	cpc	r25, r1
    3afe:	61 f0       	breq	.+24     	; 0x3b18 <LCD_moveCursor+0x66>
    3b00:	0e c0       	rjmp	.+28     	; 0x3b1e <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    3b02:	8b 81       	ldd	r24, Y+3	; 0x03
    3b04:	89 83       	std	Y+1, r24	; 0x01
    3b06:	0b c0       	rjmp	.+22     	; 0x3b1e <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    3b08:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0a:	80 5c       	subi	r24, 0xC0	; 192
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	07 c0       	rjmp	.+14     	; 0x3b1e <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    3b10:	8b 81       	ldd	r24, Y+3	; 0x03
    3b12:	80 5f       	subi	r24, 0xF0	; 240
    3b14:	89 83       	std	Y+1, r24	; 0x01
    3b16:	03 c0       	rjmp	.+6      	; 0x3b1e <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	80 5b       	subi	r24, 0xB0	; 176
    3b1c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	80 68       	ori	r24, 0x80	; 128
    3b22:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_sendCommand>
}
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	08 95       	ret

00003b36 <LCD_displayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    3b36:	df 93       	push	r29
    3b38:	cf 93       	push	r28
    3b3a:	00 d0       	rcall	.+0      	; 0x3b3c <LCD_displayStringRowColumn+0x6>
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <LCD_displayStringRowColumn+0x8>
    3b3e:	cd b7       	in	r28, 0x3d	; 61
    3b40:	de b7       	in	r29, 0x3e	; 62
    3b42:	89 83       	std	Y+1, r24	; 0x01
    3b44:	6a 83       	std	Y+2, r22	; 0x02
    3b46:	5c 83       	std	Y+4, r21	; 0x04
    3b48:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
    3b4c:	6a 81       	ldd	r22, Y+2	; 0x02
    3b4e:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    3b52:	8b 81       	ldd	r24, Y+3	; 0x03
    3b54:	9c 81       	ldd	r25, Y+4	; 0x04
    3b56:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <LCD_displayString>
}
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	08 95       	ret

00003b68 <LCD_intgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_intgerToString(int data) {
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	62 97       	sbiw	r28, 0x12	; 18
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	de bf       	out	0x3e, r29	; 62
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	cd bf       	out	0x3d, r28	; 61
    3b7c:	9a 8b       	std	Y+18, r25	; 0x12
    3b7e:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    3b80:	89 89       	ldd	r24, Y+17	; 0x11
    3b82:	9a 89       	ldd	r25, Y+18	; 0x12
    3b84:	9e 01       	movw	r18, r28
    3b86:	2f 5f       	subi	r18, 0xFF	; 255
    3b88:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8a:	b9 01       	movw	r22, r18
    3b8c:	4a e0       	ldi	r20, 0x0A	; 10
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	0e 94 13 20 	call	0x4026	; 0x4026 <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    3b94:	ce 01       	movw	r24, r28
    3b96:	01 96       	adiw	r24, 0x01	; 1
    3b98:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <LCD_displayString>
}
    3b9c:	62 96       	adiw	r28, 0x12	; 18
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	cf 91       	pop	r28
    3baa:	df 91       	pop	r29
    3bac:	08 95       	ret

00003bae <LCD_clearScreen>:

// Clears the LCD from any garbage
void LCD_clearScreen(void) {
    3bae:	df 93       	push	r29
    3bb0:	cf 93       	push	r28
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_sendCommand>
}
    3bbc:	cf 91       	pop	r28
    3bbe:	df 91       	pop	r29
    3bc0:	08 95       	ret

00003bc2 <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	64 e0       	ldi	r22, 0x04	; 4
    3bce:	40 e0       	ldi	r20, 0x00	; 0
    3bd0:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	65 e0       	ldi	r22, 0x05	; 5
    3bd8:	40 e0       	ldi	r20, 0x00	; 0
    3bda:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	66 e0       	ldi	r22, 0x06	; 6
    3be2:	40 e0       	ldi	r20, 0x00	; 0
    3be4:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	67 e0       	ldi	r22, 0x07	; 7
    3bec:	40 e0       	ldi	r20, 0x00	; 0
    3bee:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	60 e0       	ldi	r22, 0x00	; 0
    3bf6:	40 e0       	ldi	r20, 0x00	; 0
    3bf8:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	61 e0       	ldi	r22, 0x01	; 1
    3c00:	40 e0       	ldi	r20, 0x00	; 0
    3c02:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	62 e0       	ldi	r22, 0x02	; 2
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
		#endif
}
    3c10:	cf 91       	pop	r28
    3c12:	df 91       	pop	r29
    3c14:	08 95       	ret

00003c16 <KEYPAD_getPressedKey>:


uint8 KEYPAD_getPressedKey(void) {
    3c16:	df 93       	push	r29
    3c18:	cf 93       	push	r28
    3c1a:	00 d0       	rcall	.+0      	; 0x3c1c <KEYPAD_getPressedKey+0x6>
    3c1c:	cd b7       	in	r28, 0x3d	; 61
    3c1e:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3c20:	1a 82       	std	Y+2, r1	; 0x02
    3c22:	3a c0       	rjmp	.+116    	; 0x3c98 <KEYPAD_getPressedKey+0x82>
				// I set the pin by '1' for the row, and will iterate
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    3c24:	8a 81       	ldd	r24, Y+2	; 0x02
    3c26:	98 2f       	mov	r25, r24
    3c28:	9c 5f       	subi	r25, 0xFC	; 252
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	69 2f       	mov	r22, r25
    3c2e:	41 e0       	ldi	r20, 0x01	; 1
    3c30:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	98 2f       	mov	r25, r24
    3c38:	9c 5f       	subi	r25, 0xFC	; 252
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	69 2f       	mov	r22, r25
    3c3e:	40 e0       	ldi	r20, 0x00	; 0
    3c40:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    3c44:	19 82       	std	Y+1, r1	; 0x01
    3c46:	1a c0       	rjmp	.+52     	; 0x3c7c <KEYPAD_getPressedKey+0x66>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	69 81       	ldd	r22, Y+1	; 0x01
    3c4c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <GPIO_readPin>
    3c50:	88 23       	and	r24, r24
    3c52:	89 f4       	brne	.+34     	; 0x3c76 <KEYPAD_getPressedKey+0x60>
						#if (KEYPAD_COL_NUM == 3)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
    3c54:	8a 81       	ldd	r24, Y+2	; 0x02
    3c56:	28 2f       	mov	r18, r24
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	c9 01       	movw	r24, r18
    3c5c:	88 0f       	add	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	82 0f       	add	r24, r18
    3c62:	93 1f       	adc	r25, r19
    3c64:	98 2f       	mov	r25, r24
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	89 0f       	add	r24, r25
    3c6a:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	8f 5f       	subi	r24, 0xFF	; 255
    3c7a:	89 83       	std	Y+1, r24	; 0x01
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	83 30       	cpi	r24, 0x03	; 3
    3c80:	18 f3       	brcs	.-58     	; 0x3c48 <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    3c82:	8a 81       	ldd	r24, Y+2	; 0x02
    3c84:	98 2f       	mov	r25, r24
    3c86:	9c 5f       	subi	r25, 0xFC	; 252
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	69 2f       	mov	r22, r25
    3c8c:	40 e0       	ldi	r20, 0x00	; 0
    3c8e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3c92:	8a 81       	ldd	r24, Y+2	; 0x02
    3c94:	8f 5f       	subi	r24, 0xFF	; 255
    3c96:	8a 83       	std	Y+2, r24	; 0x02
    3c98:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9a:	84 30       	cpi	r24, 0x04	; 4
    3c9c:	18 f2       	brcs	.-122    	; 0x3c24 <KEYPAD_getPressedKey+0xe>
    3c9e:	c0 cf       	rjmp	.-128    	; 0x3c20 <KEYPAD_getPressedKey+0xa>

00003ca0 <EEPROM_writeByte>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>



uint8 EEPROM_writeByte(uint16 u16Address, uint8 u8Data) {
    3ca0:	df 93       	push	r29
    3ca2:	cf 93       	push	r28
    3ca4:	00 d0       	rcall	.+0      	; 0x3ca6 <EEPROM_writeByte+0x6>
    3ca6:	00 d0       	rcall	.+0      	; 0x3ca8 <EEPROM_writeByte+0x8>
    3ca8:	0f 92       	push	r0
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	9b 83       	std	Y+3, r25	; 0x03
    3cb0:	8a 83       	std	Y+2, r24	; 0x02
    3cb2:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    3cb4:	0e 94 36 0c 	call	0x186c	; 0x186c <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    3cb8:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3cbc:	88 30       	cpi	r24, 0x08	; 8
    3cbe:	11 f0       	breq	.+4      	; 0x3cc4 <EEPROM_writeByte+0x24>
	        return ERROR;
    3cc0:	1d 82       	std	Y+5, r1	; 0x05
    3cc2:	2a c0       	rjmp	.+84     	; 0x3d18 <EEPROM_writeByte+0x78>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc8:	80 70       	andi	r24, 0x00	; 0
    3cca:	97 70       	andi	r25, 0x07	; 7
    3ccc:	88 0f       	add	r24, r24
    3cce:	89 2f       	mov	r24, r25
    3cd0:	88 1f       	adc	r24, r24
    3cd2:	99 0b       	sbc	r25, r25
    3cd4:	91 95       	neg	r25
    3cd6:	80 6a       	ori	r24, 0xA0	; 160
    3cd8:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    3ce0:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3ce4:	88 31       	cpi	r24, 0x18	; 24
    3ce6:	11 f0       	breq	.+4      	; 0x3cec <EEPROM_writeByte+0x4c>
		return ERROR;
    3ce8:	1d 82       	std	Y+5, r1	; 0x05
    3cea:	16 c0       	rjmp	.+44     	; 0x3d18 <EEPROM_writeByte+0x78>
	}

	I2C_writeByte((uint8) (u16Address));
    3cec:	8a 81       	ldd	r24, Y+2	; 0x02
    3cee:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3cf2:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3cf6:	88 32       	cpi	r24, 0x28	; 40
    3cf8:	11 f0       	breq	.+4      	; 0x3cfe <EEPROM_writeByte+0x5e>
		return ERROR;
    3cfa:	1d 82       	std	Y+5, r1	; 0x05
    3cfc:	0d c0       	rjmp	.+26     	; 0x3d18 <EEPROM_writeByte+0x78>
	}

	I2C_writeByte(u8Data);
    3cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    3d00:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3d04:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3d08:	88 32       	cpi	r24, 0x28	; 40
    3d0a:	11 f0       	breq	.+4      	; 0x3d10 <EEPROM_writeByte+0x70>
		return ERROR;
    3d0c:	1d 82       	std	Y+5, r1	; 0x05
    3d0e:	04 c0       	rjmp	.+8      	; 0x3d18 <EEPROM_writeByte+0x78>
	}

	I2C_stop();
    3d10:	0e 94 46 0c 	call	0x188c	; 0x188c <I2C_stop>

	return SUCCESS;
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	8d 83       	std	Y+5, r24	; 0x05
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	cf 91       	pop	r28
    3d26:	df 91       	pop	r29
    3d28:	08 95       	ret

00003d2a <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16Address, uint8 *u8Data) {
    3d2a:	df 93       	push	r29
    3d2c:	cf 93       	push	r28
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <EEPROM_readByte+0x6>
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <EEPROM_readByte+0x8>
    3d32:	00 d0       	rcall	.+0      	; 0x3d34 <EEPROM_readByte+0xa>
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	9b 83       	std	Y+3, r25	; 0x03
    3d3a:	8a 83       	std	Y+2, r24	; 0x02
    3d3c:	7d 83       	std	Y+5, r23	; 0x05
    3d3e:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    3d40:	0e 94 36 0c 	call	0x186c	; 0x186c <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    3d44:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3d48:	88 30       	cpi	r24, 0x08	; 8
    3d4a:	11 f0       	breq	.+4      	; 0x3d50 <EEPROM_readByte+0x26>
			return ERROR;
    3d4c:	1e 82       	std	Y+6, r1	; 0x06
    3d4e:	3e c0       	rjmp	.+124    	; 0x3dcc <EEPROM_readByte+0xa2>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3d50:	8a 81       	ldd	r24, Y+2	; 0x02
    3d52:	9b 81       	ldd	r25, Y+3	; 0x03
    3d54:	80 70       	andi	r24, 0x00	; 0
    3d56:	97 70       	andi	r25, 0x07	; 7
    3d58:	88 0f       	add	r24, r24
    3d5a:	89 2f       	mov	r24, r25
    3d5c:	88 1f       	adc	r24, r24
    3d5e:	99 0b       	sbc	r25, r25
    3d60:	91 95       	neg	r25
    3d62:	80 6a       	ori	r24, 0xA0	; 160
    3d64:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    3d6c:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3d70:	88 31       	cpi	r24, 0x18	; 24
    3d72:	11 f0       	breq	.+4      	; 0x3d78 <EEPROM_readByte+0x4e>
		return ERROR;
    3d74:	1e 82       	std	Y+6, r1	; 0x06
    3d76:	2a c0       	rjmp	.+84     	; 0x3dcc <EEPROM_readByte+0xa2>
	}

	I2C_writeByte((uint8) (u16Address));
    3d78:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3d7e:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3d82:	88 32       	cpi	r24, 0x28	; 40
    3d84:	11 f0       	breq	.+4      	; 0x3d8a <EEPROM_readByte+0x60>
		return ERROR;
    3d86:	1e 82       	std	Y+6, r1	; 0x06
    3d88:	21 c0       	rjmp	.+66     	; 0x3dcc <EEPROM_readByte+0xa2>
	}

	I2C_start();
    3d8a:	0e 94 36 0c 	call	0x186c	; 0x186c <I2C_start>
	if (I2C_getStatus() != I2C_REP_START) {
    3d8e:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3d92:	80 31       	cpi	r24, 0x10	; 16
    3d94:	11 f0       	breq	.+4      	; 0x3d9a <EEPROM_readByte+0x70>
		return ERROR;
    3d96:	1e 82       	std	Y+6, r1	; 0x06
    3d98:	19 c0       	rjmp	.+50     	; 0x3dcc <EEPROM_readByte+0xa2>
	}

	I2C_writeByte(EEPROM_ADDRESS_EQN | 1); // For Reading
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	81 60       	ori	r24, 0x01	; 1
    3d9e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_R_ACK) {
    3da2:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3da6:	80 34       	cpi	r24, 0x40	; 64
    3da8:	11 f0       	breq	.+4      	; 0x3dae <EEPROM_readByte+0x84>
		return ERROR;
    3daa:	1e 82       	std	Y+6, r1	; 0x06
    3dac:	0f c0       	rjmp	.+30     	; 0x3dcc <EEPROM_readByte+0xa2>
	}

	*u8Data = I2C_readByteWithNACK();
    3dae:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <I2C_readByteWithNACK>
    3db2:	ec 81       	ldd	r30, Y+4	; 0x04
    3db4:	fd 81       	ldd	r31, Y+5	; 0x05
    3db6:	80 83       	st	Z, r24
	if (I2C_getStatus() != I2C_MR_DATA_NACK) {
    3db8:	0e 94 8e 0c 	call	0x191c	; 0x191c <I2C_getStatus>
    3dbc:	88 35       	cpi	r24, 0x58	; 88
    3dbe:	11 f0       	breq	.+4      	; 0x3dc4 <EEPROM_readByte+0x9a>
		return ERROR;
    3dc0:	1e 82       	std	Y+6, r1	; 0x06
    3dc2:	04 c0       	rjmp	.+8      	; 0x3dcc <EEPROM_readByte+0xa2>
	}

	I2C_stop();
    3dc4:	0e 94 46 0c 	call	0x188c	; 0x188c <I2C_stop>

	return SUCCESS;
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	8e 83       	std	Y+6, r24	; 0x06
    3dcc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3dce:	26 96       	adiw	r28, 0x06	; 6
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	f8 94       	cli
    3dd4:	de bf       	out	0x3e, r29	; 62
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	cd bf       	out	0x3d, r28	; 61
    3dda:	cf 91       	pop	r28
    3ddc:	df 91       	pop	r29
    3dde:	08 95       	ret

00003de0 <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	00 d0       	rcall	.+0      	; 0x3de6 <BUTTON_Init+0x6>
    3de6:	0f 92       	push	r0
    3de8:	cd b7       	in	r28, 0x3d	; 61
    3dea:	de b7       	in	r29, 0x3e	; 62
    3dec:	8a 83       	std	Y+2, r24	; 0x02
    3dee:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    3df0:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    3df2:	8b 81       	ldd	r24, Y+3	; 0x03
    3df4:	88 30       	cpi	r24, 0x08	; 8
    3df6:	18 f0       	brcs	.+6      	; 0x3dfe <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	89 83       	std	Y+1, r24	; 0x01
    3dfc:	0c c0       	rjmp	.+24     	; 0x3e16 <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	84 30       	cpi	r24, 0x04	; 4
    3e02:	18 f0       	brcs	.+6      	; 0x3e0a <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    3e04:	82 e0       	ldi	r24, 0x02	; 2
    3e06:	89 83       	std	Y+1, r24	; 0x01
    3e08:	06 c0       	rjmp	.+12     	; 0x3e16 <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    3e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0c:	6b 81       	ldd	r22, Y+3	; 0x03
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    3e14:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	cf 91       	pop	r28
    3e20:	df 91       	pop	r29
    3e22:	08 95       	ret

00003e24 <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	00 d0       	rcall	.+0      	; 0x3e2a <BUTTON_Read+0x6>
    3e2a:	0f 92       	push	r0
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	8a 83       	std	Y+2, r24	; 0x02
    3e32:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    3e34:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    3e36:	8b 81       	ldd	r24, Y+3	; 0x03
    3e38:	88 30       	cpi	r24, 0x08	; 8
    3e3a:	18 f0       	brcs	.+6      	; 0x3e42 <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	89 83       	std	Y+1, r24	; 0x01
    3e40:	0b c0       	rjmp	.+22     	; 0x3e58 <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    3e42:	8a 81       	ldd	r24, Y+2	; 0x02
    3e44:	84 30       	cpi	r24, 0x04	; 4
    3e46:	18 f0       	brcs	.+6      	; 0x3e4e <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	89 83       	std	Y+1, r24	; 0x01
    3e4c:	05 c0       	rjmp	.+10     	; 0x3e58 <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    3e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e50:	6b 81       	ldd	r22, Y+3	; 0x03
    3e52:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    3e56:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    3e58:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5a:	6b 81       	ldd	r22, Y+3	; 0x03
    3e5c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <GPIO_readPin>
}
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	cf 91       	pop	r28
    3e68:	df 91       	pop	r29
    3e6a:	08 95       	ret

00003e6c <__vector_9>:
//	}
//}

unsigned char g_tick = 0;
ISR(TIMER0_OVF_vect)
{
    3e6c:	1f 92       	push	r1
    3e6e:	0f 92       	push	r0
    3e70:	0f b6       	in	r0, 0x3f	; 63
    3e72:	0f 92       	push	r0
    3e74:	11 24       	eor	r1, r1
    3e76:	8f 93       	push	r24
    3e78:	9f 93       	push	r25
    3e7a:	af 93       	push	r26
    3e7c:	bf 93       	push	r27
    3e7e:	ef 93       	push	r30
    3e80:	ff 93       	push	r31
    3e82:	df 93       	push	r29
    3e84:	cf 93       	push	r28
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 6; // start the timer counting again after every overflow from 6.
    3e8a:	e2 e5       	ldi	r30, 0x52	; 82
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	86 e0       	ldi	r24, 0x06	; 6
    3e90:	80 83       	st	Z, r24

	g_tick++;
    3e92:	80 91 6a 01 	lds	r24, 0x016A
    3e96:	8f 5f       	subi	r24, 0xFF	; 255
    3e98:	80 93 6a 01 	sts	0x016A, r24

	if(g_tick == NUM_OF_OVERFLOWS_PER_SECOND)
    3e9c:	80 91 6a 01 	lds	r24, 0x016A
    3ea0:	84 30       	cpi	r24, 0x04	; 4
    3ea2:	51 f4       	brne	.+20     	; 0x3eb8 <__vector_9+0x4c>
	{
		PORTC = PORTC ^ (1<<PC0);   //toggle led every 0.5 second
    3ea4:	a5 e3       	ldi	r26, 0x35	; 53
    3ea6:	b0 e0       	ldi	r27, 0x00	; 0
    3ea8:	e5 e3       	ldi	r30, 0x35	; 53
    3eaa:	f0 e0       	ldi	r31, 0x00	; 0
    3eac:	90 81       	ld	r25, Z
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	89 27       	eor	r24, r25
    3eb2:	8c 93       	st	X, r24
		g_tick = 0;                 //clear the tick counter again to count a new 0.5 second
    3eb4:	10 92 6a 01 	sts	0x016A, r1
	}
}
    3eb8:	cf 91       	pop	r28
    3eba:	df 91       	pop	r29
    3ebc:	ff 91       	pop	r31
    3ebe:	ef 91       	pop	r30
    3ec0:	bf 91       	pop	r27
    3ec2:	af 91       	pop	r26
    3ec4:	9f 91       	pop	r25
    3ec6:	8f 91       	pop	r24
    3ec8:	0f 90       	pop	r0
    3eca:	0f be       	out	0x3f, r0	; 63
    3ecc:	0f 90       	pop	r0
    3ece:	1f 90       	pop	r1
    3ed0:	18 95       	reti

00003ed2 <Timer0_Init_Normal_Mode>:
 * Timer frequency will be around 1Khz, Ttimer = 1ms
 * For initial timer counter = 6, overflow will occur every 250ms (6 --> 255 --> 6)
 * Overflow interrupt will be generated every 250ms, so we need two overflow interrupts to count 0.5second.
 */
void Timer0_Init_Normal_Mode(void)
{
    3ed2:	df 93       	push	r29
    3ed4:	cf 93       	push	r28
    3ed6:	cd b7       	in	r28, 0x3d	; 61
    3ed8:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 6; //Set Timer initial value to 6
    3eda:	e2 e5       	ldi	r30, 0x52	; 82
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	86 e0       	ldi	r24, 0x06	; 6
    3ee0:	80 83       	st	Z, r24

	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    3ee2:	a9 e5       	ldi	r26, 0x59	; 89
    3ee4:	b0 e0       	ldi	r27, 0x00	; 0
    3ee6:	e9 e5       	ldi	r30, 0x59	; 89
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	80 81       	ld	r24, Z
    3eec:	81 60       	ori	r24, 0x01	; 1
    3eee:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
    3ef0:	e3 e5       	ldi	r30, 0x53	; 83
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	85 e8       	ldi	r24, 0x85	; 133
    3ef6:	80 83       	st	Z, r24
}
    3ef8:	cf 91       	pop	r28
    3efa:	df 91       	pop	r29
    3efc:	08 95       	ret

00003efe <main>:

int main(void)
{
    3efe:	df 93       	push	r29
    3f00:	cf 93       	push	r28
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
	DDRC  |= (1<<PC0);           // Configure the led pin as output pin.
    3f06:	a4 e3       	ldi	r26, 0x34	; 52
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
    3f0a:	e4 e3       	ldi	r30, 0x34	; 52
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	80 81       	ld	r24, Z
    3f10:	81 60       	ori	r24, 0x01	; 1
    3f12:	8c 93       	st	X, r24
	PORTC &= ~(1<<PC0);          // LED is OFF at the beginning (Positive Logic).
    3f14:	a5 e3       	ldi	r26, 0x35	; 53
    3f16:	b0 e0       	ldi	r27, 0x00	; 0
    3f18:	e5 e3       	ldi	r30, 0x35	; 53
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	80 81       	ld	r24, Z
    3f1e:	8e 7f       	andi	r24, 0xFE	; 254
    3f20:	8c 93       	st	X, r24

	SREG  |= (1<<7);             //Enable global interrupts in MC by setting the I-Bit.
    3f22:	af e5       	ldi	r26, 0x5F	; 95
    3f24:	b0 e0       	ldi	r27, 0x00	; 0
    3f26:	ef e5       	ldi	r30, 0x5F	; 95
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	80 81       	ld	r24, Z
    3f2c:	80 68       	ori	r24, 0x80	; 128
    3f2e:	8c 93       	st	X, r24

	Timer0_Init_Normal_Mode();   //start the timer.
    3f30:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <Timer0_Init_Normal_Mode>
    3f34:	ff cf       	rjmp	.-2      	; 0x3f34 <main+0x36>

00003f36 <__mulsi3>:
    3f36:	62 9f       	mul	r22, r18
    3f38:	d0 01       	movw	r26, r0
    3f3a:	73 9f       	mul	r23, r19
    3f3c:	f0 01       	movw	r30, r0
    3f3e:	82 9f       	mul	r24, r18
    3f40:	e0 0d       	add	r30, r0
    3f42:	f1 1d       	adc	r31, r1
    3f44:	64 9f       	mul	r22, r20
    3f46:	e0 0d       	add	r30, r0
    3f48:	f1 1d       	adc	r31, r1
    3f4a:	92 9f       	mul	r25, r18
    3f4c:	f0 0d       	add	r31, r0
    3f4e:	83 9f       	mul	r24, r19
    3f50:	f0 0d       	add	r31, r0
    3f52:	74 9f       	mul	r23, r20
    3f54:	f0 0d       	add	r31, r0
    3f56:	65 9f       	mul	r22, r21
    3f58:	f0 0d       	add	r31, r0
    3f5a:	99 27       	eor	r25, r25
    3f5c:	72 9f       	mul	r23, r18
    3f5e:	b0 0d       	add	r27, r0
    3f60:	e1 1d       	adc	r30, r1
    3f62:	f9 1f       	adc	r31, r25
    3f64:	63 9f       	mul	r22, r19
    3f66:	b0 0d       	add	r27, r0
    3f68:	e1 1d       	adc	r30, r1
    3f6a:	f9 1f       	adc	r31, r25
    3f6c:	bd 01       	movw	r22, r26
    3f6e:	cf 01       	movw	r24, r30
    3f70:	11 24       	eor	r1, r1
    3f72:	08 95       	ret

00003f74 <__udivmodsi4>:
    3f74:	a1 e2       	ldi	r26, 0x21	; 33
    3f76:	1a 2e       	mov	r1, r26
    3f78:	aa 1b       	sub	r26, r26
    3f7a:	bb 1b       	sub	r27, r27
    3f7c:	fd 01       	movw	r30, r26
    3f7e:	0d c0       	rjmp	.+26     	; 0x3f9a <__udivmodsi4_ep>

00003f80 <__udivmodsi4_loop>:
    3f80:	aa 1f       	adc	r26, r26
    3f82:	bb 1f       	adc	r27, r27
    3f84:	ee 1f       	adc	r30, r30
    3f86:	ff 1f       	adc	r31, r31
    3f88:	a2 17       	cp	r26, r18
    3f8a:	b3 07       	cpc	r27, r19
    3f8c:	e4 07       	cpc	r30, r20
    3f8e:	f5 07       	cpc	r31, r21
    3f90:	20 f0       	brcs	.+8      	; 0x3f9a <__udivmodsi4_ep>
    3f92:	a2 1b       	sub	r26, r18
    3f94:	b3 0b       	sbc	r27, r19
    3f96:	e4 0b       	sbc	r30, r20
    3f98:	f5 0b       	sbc	r31, r21

00003f9a <__udivmodsi4_ep>:
    3f9a:	66 1f       	adc	r22, r22
    3f9c:	77 1f       	adc	r23, r23
    3f9e:	88 1f       	adc	r24, r24
    3fa0:	99 1f       	adc	r25, r25
    3fa2:	1a 94       	dec	r1
    3fa4:	69 f7       	brne	.-38     	; 0x3f80 <__udivmodsi4_loop>
    3fa6:	60 95       	com	r22
    3fa8:	70 95       	com	r23
    3faa:	80 95       	com	r24
    3fac:	90 95       	com	r25
    3fae:	9b 01       	movw	r18, r22
    3fb0:	ac 01       	movw	r20, r24
    3fb2:	bd 01       	movw	r22, r26
    3fb4:	cf 01       	movw	r24, r30
    3fb6:	08 95       	ret

00003fb8 <__prologue_saves__>:
    3fb8:	2f 92       	push	r2
    3fba:	3f 92       	push	r3
    3fbc:	4f 92       	push	r4
    3fbe:	5f 92       	push	r5
    3fc0:	6f 92       	push	r6
    3fc2:	7f 92       	push	r7
    3fc4:	8f 92       	push	r8
    3fc6:	9f 92       	push	r9
    3fc8:	af 92       	push	r10
    3fca:	bf 92       	push	r11
    3fcc:	cf 92       	push	r12
    3fce:	df 92       	push	r13
    3fd0:	ef 92       	push	r14
    3fd2:	ff 92       	push	r15
    3fd4:	0f 93       	push	r16
    3fd6:	1f 93       	push	r17
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	cd b7       	in	r28, 0x3d	; 61
    3fde:	de b7       	in	r29, 0x3e	; 62
    3fe0:	ca 1b       	sub	r28, r26
    3fe2:	db 0b       	sbc	r29, r27
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	de bf       	out	0x3e, r29	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	cd bf       	out	0x3d, r28	; 61
    3fee:	09 94       	ijmp

00003ff0 <__epilogue_restores__>:
    3ff0:	2a 88       	ldd	r2, Y+18	; 0x12
    3ff2:	39 88       	ldd	r3, Y+17	; 0x11
    3ff4:	48 88       	ldd	r4, Y+16	; 0x10
    3ff6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ff8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ffa:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ffc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ffe:	9b 84       	ldd	r9, Y+11	; 0x0b
    4000:	aa 84       	ldd	r10, Y+10	; 0x0a
    4002:	b9 84       	ldd	r11, Y+9	; 0x09
    4004:	c8 84       	ldd	r12, Y+8	; 0x08
    4006:	df 80       	ldd	r13, Y+7	; 0x07
    4008:	ee 80       	ldd	r14, Y+6	; 0x06
    400a:	fd 80       	ldd	r15, Y+5	; 0x05
    400c:	0c 81       	ldd	r16, Y+4	; 0x04
    400e:	1b 81       	ldd	r17, Y+3	; 0x03
    4010:	aa 81       	ldd	r26, Y+2	; 0x02
    4012:	b9 81       	ldd	r27, Y+1	; 0x01
    4014:	ce 0f       	add	r28, r30
    4016:	d1 1d       	adc	r29, r1
    4018:	0f b6       	in	r0, 0x3f	; 63
    401a:	f8 94       	cli
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	cd bf       	out	0x3d, r28	; 61
    4022:	ed 01       	movw	r28, r26
    4024:	08 95       	ret

00004026 <itoa>:
    4026:	fb 01       	movw	r30, r22
    4028:	9f 01       	movw	r18, r30
    402a:	e8 94       	clt
    402c:	42 30       	cpi	r20, 0x02	; 2
    402e:	c4 f0       	brlt	.+48     	; 0x4060 <itoa+0x3a>
    4030:	45 32       	cpi	r20, 0x25	; 37
    4032:	b4 f4       	brge	.+44     	; 0x4060 <itoa+0x3a>
    4034:	4a 30       	cpi	r20, 0x0A	; 10
    4036:	29 f4       	brne	.+10     	; 0x4042 <itoa+0x1c>
    4038:	97 fb       	bst	r25, 7
    403a:	1e f4       	brtc	.+6      	; 0x4042 <itoa+0x1c>
    403c:	90 95       	com	r25
    403e:	81 95       	neg	r24
    4040:	9f 4f       	sbci	r25, 0xFF	; 255
    4042:	64 2f       	mov	r22, r20
    4044:	77 27       	eor	r23, r23
    4046:	0e 94 c0 20 	call	0x4180	; 0x4180 <__udivmodhi4>
    404a:	80 5d       	subi	r24, 0xD0	; 208
    404c:	8a 33       	cpi	r24, 0x3A	; 58
    404e:	0c f0       	brlt	.+2      	; 0x4052 <itoa+0x2c>
    4050:	89 5d       	subi	r24, 0xD9	; 217
    4052:	81 93       	st	Z+, r24
    4054:	cb 01       	movw	r24, r22
    4056:	00 97       	sbiw	r24, 0x00	; 0
    4058:	a1 f7       	brne	.-24     	; 0x4042 <itoa+0x1c>
    405a:	16 f4       	brtc	.+4      	; 0x4060 <itoa+0x3a>
    405c:	5d e2       	ldi	r21, 0x2D	; 45
    405e:	51 93       	st	Z+, r21
    4060:	10 82       	st	Z, r1
    4062:	c9 01       	movw	r24, r18
    4064:	0c 94 8e 20 	jmp	0x411c	; 0x411c <strrev>

00004068 <ceil>:
    4068:	3b d0       	rcall	.+118    	; 0x40e0 <__fp_trunc>
    406a:	80 f0       	brcs	.+32     	; 0x408c <ceil+0x24>
    406c:	9f 37       	cpi	r25, 0x7F	; 127
    406e:	40 f4       	brcc	.+16     	; 0x4080 <ceil+0x18>
    4070:	91 11       	cpse	r25, r1
    4072:	0e f4       	brtc	.+2      	; 0x4076 <ceil+0xe>
    4074:	4d c0       	rjmp	.+154    	; 0x4110 <__fp_szero>
    4076:	60 e0       	ldi	r22, 0x00	; 0
    4078:	70 e0       	ldi	r23, 0x00	; 0
    407a:	80 e8       	ldi	r24, 0x80	; 128
    407c:	9f e3       	ldi	r25, 0x3F	; 63
    407e:	08 95       	ret
    4080:	26 f0       	brts	.+8      	; 0x408a <ceil+0x22>
    4082:	1b 16       	cp	r1, r27
    4084:	61 1d       	adc	r22, r1
    4086:	71 1d       	adc	r23, r1
    4088:	81 1d       	adc	r24, r1
    408a:	01 c0       	rjmp	.+2      	; 0x408e <__fp_mintl>
    408c:	1b c0       	rjmp	.+54     	; 0x40c4 <__fp_mpack>

0000408e <__fp_mintl>:
    408e:	88 23       	and	r24, r24
    4090:	71 f4       	brne	.+28     	; 0x40ae <__fp_mintl+0x20>
    4092:	77 23       	and	r23, r23
    4094:	21 f0       	breq	.+8      	; 0x409e <__fp_mintl+0x10>
    4096:	98 50       	subi	r25, 0x08	; 8
    4098:	87 2b       	or	r24, r23
    409a:	76 2f       	mov	r23, r22
    409c:	07 c0       	rjmp	.+14     	; 0x40ac <__fp_mintl+0x1e>
    409e:	66 23       	and	r22, r22
    40a0:	11 f4       	brne	.+4      	; 0x40a6 <__fp_mintl+0x18>
    40a2:	99 27       	eor	r25, r25
    40a4:	0d c0       	rjmp	.+26     	; 0x40c0 <__fp_mintl+0x32>
    40a6:	90 51       	subi	r25, 0x10	; 16
    40a8:	86 2b       	or	r24, r22
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	60 e0       	ldi	r22, 0x00	; 0
    40ae:	2a f0       	brmi	.+10     	; 0x40ba <__fp_mintl+0x2c>
    40b0:	9a 95       	dec	r25
    40b2:	66 0f       	add	r22, r22
    40b4:	77 1f       	adc	r23, r23
    40b6:	88 1f       	adc	r24, r24
    40b8:	da f7       	brpl	.-10     	; 0x40b0 <__fp_mintl+0x22>
    40ba:	88 0f       	add	r24, r24
    40bc:	96 95       	lsr	r25
    40be:	87 95       	ror	r24
    40c0:	97 f9       	bld	r25, 7
    40c2:	08 95       	ret

000040c4 <__fp_mpack>:
    40c4:	9f 3f       	cpi	r25, 0xFF	; 255
    40c6:	31 f0       	breq	.+12     	; 0x40d4 <__fp_mpack_finite+0xc>

000040c8 <__fp_mpack_finite>:
    40c8:	91 50       	subi	r25, 0x01	; 1
    40ca:	20 f4       	brcc	.+8      	; 0x40d4 <__fp_mpack_finite+0xc>
    40cc:	87 95       	ror	r24
    40ce:	77 95       	ror	r23
    40d0:	67 95       	ror	r22
    40d2:	b7 95       	ror	r27
    40d4:	88 0f       	add	r24, r24
    40d6:	91 1d       	adc	r25, r1
    40d8:	96 95       	lsr	r25
    40da:	87 95       	ror	r24
    40dc:	97 f9       	bld	r25, 7
    40de:	08 95       	ret

000040e0 <__fp_trunc>:
    40e0:	35 d0       	rcall	.+106    	; 0x414c <__fp_splitA>
    40e2:	a0 f0       	brcs	.+40     	; 0x410c <__fp_trunc+0x2c>
    40e4:	be e7       	ldi	r27, 0x7E	; 126
    40e6:	b9 17       	cp	r27, r25
    40e8:	88 f4       	brcc	.+34     	; 0x410c <__fp_trunc+0x2c>
    40ea:	bb 27       	eor	r27, r27
    40ec:	9f 38       	cpi	r25, 0x8F	; 143
    40ee:	60 f4       	brcc	.+24     	; 0x4108 <__fp_trunc+0x28>
    40f0:	16 16       	cp	r1, r22
    40f2:	b1 1d       	adc	r27, r1
    40f4:	67 2f       	mov	r22, r23
    40f6:	78 2f       	mov	r23, r24
    40f8:	88 27       	eor	r24, r24
    40fa:	98 5f       	subi	r25, 0xF8	; 248
    40fc:	f7 cf       	rjmp	.-18     	; 0x40ec <__fp_trunc+0xc>
    40fe:	86 95       	lsr	r24
    4100:	77 95       	ror	r23
    4102:	67 95       	ror	r22
    4104:	b1 1d       	adc	r27, r1
    4106:	93 95       	inc	r25
    4108:	96 39       	cpi	r25, 0x96	; 150
    410a:	c8 f3       	brcs	.-14     	; 0x40fe <__fp_trunc+0x1e>
    410c:	08 95       	ret

0000410e <__fp_zero>:
    410e:	e8 94       	clt

00004110 <__fp_szero>:
    4110:	bb 27       	eor	r27, r27
    4112:	66 27       	eor	r22, r22
    4114:	77 27       	eor	r23, r23
    4116:	cb 01       	movw	r24, r22
    4118:	97 f9       	bld	r25, 7
    411a:	08 95       	ret

0000411c <strrev>:
    411c:	dc 01       	movw	r26, r24
    411e:	fc 01       	movw	r30, r24
    4120:	67 2f       	mov	r22, r23
    4122:	71 91       	ld	r23, Z+
    4124:	77 23       	and	r23, r23
    4126:	e1 f7       	brne	.-8      	; 0x4120 <strrev+0x4>
    4128:	32 97       	sbiw	r30, 0x02	; 2
    412a:	04 c0       	rjmp	.+8      	; 0x4134 <strrev+0x18>
    412c:	7c 91       	ld	r23, X
    412e:	6d 93       	st	X+, r22
    4130:	70 83       	st	Z, r23
    4132:	62 91       	ld	r22, -Z
    4134:	ae 17       	cp	r26, r30
    4136:	bf 07       	cpc	r27, r31
    4138:	c8 f3       	brcs	.-14     	; 0x412c <strrev+0x10>
    413a:	08 95       	ret

0000413c <__fp_split3>:
    413c:	57 fd       	sbrc	r21, 7
    413e:	90 58       	subi	r25, 0x80	; 128
    4140:	44 0f       	add	r20, r20
    4142:	55 1f       	adc	r21, r21
    4144:	59 f0       	breq	.+22     	; 0x415c <__fp_splitA+0x10>
    4146:	5f 3f       	cpi	r21, 0xFF	; 255
    4148:	71 f0       	breq	.+28     	; 0x4166 <__fp_splitA+0x1a>
    414a:	47 95       	ror	r20

0000414c <__fp_splitA>:
    414c:	88 0f       	add	r24, r24
    414e:	97 fb       	bst	r25, 7
    4150:	99 1f       	adc	r25, r25
    4152:	61 f0       	breq	.+24     	; 0x416c <__fp_splitA+0x20>
    4154:	9f 3f       	cpi	r25, 0xFF	; 255
    4156:	79 f0       	breq	.+30     	; 0x4176 <__fp_splitA+0x2a>
    4158:	87 95       	ror	r24
    415a:	08 95       	ret
    415c:	12 16       	cp	r1, r18
    415e:	13 06       	cpc	r1, r19
    4160:	14 06       	cpc	r1, r20
    4162:	55 1f       	adc	r21, r21
    4164:	f2 cf       	rjmp	.-28     	; 0x414a <__fp_split3+0xe>
    4166:	46 95       	lsr	r20
    4168:	f1 df       	rcall	.-30     	; 0x414c <__fp_splitA>
    416a:	08 c0       	rjmp	.+16     	; 0x417c <__fp_splitA+0x30>
    416c:	16 16       	cp	r1, r22
    416e:	17 06       	cpc	r1, r23
    4170:	18 06       	cpc	r1, r24
    4172:	99 1f       	adc	r25, r25
    4174:	f1 cf       	rjmp	.-30     	; 0x4158 <__fp_splitA+0xc>
    4176:	86 95       	lsr	r24
    4178:	71 05       	cpc	r23, r1
    417a:	61 05       	cpc	r22, r1
    417c:	08 94       	sec
    417e:	08 95       	ret

00004180 <__udivmodhi4>:
    4180:	aa 1b       	sub	r26, r26
    4182:	bb 1b       	sub	r27, r27
    4184:	51 e1       	ldi	r21, 0x11	; 17
    4186:	07 c0       	rjmp	.+14     	; 0x4196 <__udivmodhi4_ep>

00004188 <__udivmodhi4_loop>:
    4188:	aa 1f       	adc	r26, r26
    418a:	bb 1f       	adc	r27, r27
    418c:	a6 17       	cp	r26, r22
    418e:	b7 07       	cpc	r27, r23
    4190:	10 f0       	brcs	.+4      	; 0x4196 <__udivmodhi4_ep>
    4192:	a6 1b       	sub	r26, r22
    4194:	b7 0b       	sbc	r27, r23

00004196 <__udivmodhi4_ep>:
    4196:	88 1f       	adc	r24, r24
    4198:	99 1f       	adc	r25, r25
    419a:	5a 95       	dec	r21
    419c:	a9 f7       	brne	.-22     	; 0x4188 <__udivmodhi4_loop>
    419e:	80 95       	com	r24
    41a0:	90 95       	com	r25
    41a2:	bc 01       	movw	r22, r24
    41a4:	cd 01       	movw	r24, r26
    41a6:	08 95       	ret

000041a8 <_exit>:
    41a8:	f8 94       	cli

000041aa <__stop_program>:
    41aa:	ff cf       	rjmp	.-2      	; 0x41aa <__stop_program>
